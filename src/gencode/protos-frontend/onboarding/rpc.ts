// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "protos-frontend/onboarding/rpc.proto" (package "onboarding", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { OnboardingStage } from "../enums/OnboardingStage";
import { Modal } from "../UI/Modal";
import { CheckBox } from "../UI/CheckBox";
import { LocationConsent } from "../UI/LocationConsent";
import { NotificationsConsent } from "../UI/NotificationsConsent";
import { ErrorType } from "../enums/ResponseType";
import { Text } from "../UI/Text";
import { Image } from "../UI/Image";
import { LivenessCheckStatus } from "../enums/ResponseType";
import { Timestamp } from "../../google/protobuf/timestamp";
import { RequestHeader } from "../../core/headers";
import { Button } from "../UI/Button";
import { VerificationResponseType } from "../enums/ResponseType";
import { ResponseHeader } from "../../core/headers";
/**
 * @generated from protobuf message onboarding.TriggerPhoneVerificationResponse
 */
export interface TriggerPhoneVerificationResponse {
    /**
     * @generated from protobuf field: core.ResponseHeader resp_header = 1;
     */
    respHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: enums.VerificationResponseType response_type = 2;
     */
    responseType: VerificationResponseType;
}
/**
 * @generated from protobuf message onboarding.GetPhoneOTPVerificationScreenResponse
 */
export interface GetPhoneOTPVerificationScreenResponse {
    /**
     * @generated from protobuf field: core.ResponseHeader resp_header = 1;
     */
    respHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: string wait_text = 4;
     */
    waitText: string;
    /**
     * @generated from protobuf field: int32 timer_in_seconds = 5;
     */
    timerInSeconds: number;
    /**
     * @generated from protobuf field: string resend_otp_text = 6;
     */
    resendOtpText: string;
    /**
     * @generated from protobuf field: UI.Button primary_button = 7;
     */
    primaryButton?: Button;
}
/**
 * @generated from protobuf message onboarding.TriggerPhoneOTPVerificationRequest
 */
export interface TriggerPhoneOTPVerificationRequest {
    /**
     * @generated from protobuf field: core.RequestHeader req_header = 1;
     */
    reqHeader?: RequestHeader;
    /**
     * @generated from protobuf field: string otp = 2;
     */
    otp: string;
}
/**
 * @generated from protobuf message onboarding.TriggerPhoneOTPVerificationResponse
 */
export interface TriggerPhoneOTPVerificationResponse {
    /**
     * @generated from protobuf field: core.ResponseHeader resp_header = 1;
     */
    respHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: enums.VerificationResponseType response_type = 2;
     */
    responseType: VerificationResponseType;
}
/**
 * @generated from protobuf message onboarding.GetEmailVerificationScreenResponse
 */
export interface GetEmailVerificationScreenResponse {
    /**
     * @generated from protobuf field: core.ResponseHeader resp_header = 1;
     */
    respHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string sub_title = 3;
     */
    subTitle: string;
    /**
     * @generated from protobuf field: UI.Button primary_button = 4;
     */
    primaryButton?: Button;
    /**
     * @generated from protobuf field: string img_url = 5;
     */
    imgUrl: string;
}
/**
 * @generated from protobuf message onboarding.TriggerEmailVerificationRequest
 */
export interface TriggerEmailVerificationRequest {
    /**
     * @generated from protobuf field: core.RequestHeader req_header = 1;
     */
    reqHeader?: RequestHeader;
    /**
     * @generated from protobuf field: string email_id = 2;
     */
    emailId: string;
    /**
     * @generated from protobuf field: string user_name = 3;
     */
    userName: string;
}
/**
 * @generated from protobuf message onboarding.TriggerEmailVerificationResponse
 */
export interface TriggerEmailVerificationResponse {
    /**
     * @generated from protobuf field: core.ResponseHeader resp_header = 1;
     */
    respHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: enums.VerificationResponseType response_type = 2;
     */
    responseType: VerificationResponseType;
}
/**
 * @generated from protobuf message onboarding.GetPhoneVerificationScreenResponse
 */
export interface GetPhoneVerificationScreenResponse {
    /**
     * @generated from protobuf field: core.ResponseHeader resp_header = 1;
     */
    respHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string sub_title = 3;
     */
    subTitle: string;
    /**
     * @generated from protobuf field: string phone_number_heading = 4;
     */
    phoneNumberHeading: string;
    /**
     * @generated from protobuf field: string input_number = 5;
     */
    inputNumber: string;
    /**
     * @generated from protobuf field: string phone_number_breifing = 6;
     */
    phoneNumberBreifing: string;
    /**
     * @generated from protobuf field: string img1_url = 7;
     */
    img1Url: string;
    /**
     * @generated from protobuf field: UI.Button primary_button = 8;
     */
    primaryButton?: Button;
}
/**
 * @generated from protobuf message onboarding.GetPanVerificationScreenResponse
 */
export interface GetPanVerificationScreenResponse {
    /**
     * @generated from protobuf field: core.ResponseHeader resp_header = 1;
     */
    respHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: string image_url = 2;
     */
    imageUrl: string;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string description = 4;
     */
    description: string;
    /**
     * @generated from protobuf field: string pan_number = 5;
     */
    panNumber: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp date_of_birth = 6;
     */
    dateOfBirth?: Timestamp;
    /**
     * @generated from protobuf field: string details_storage_permission_text = 7;
     */
    detailsStoragePermissionText: string;
    /**
     * @generated from protobuf field: string info_usage_permission_text = 8;
     */
    infoUsagePermissionText: string;
    /**
     * @generated from protobuf field: UI.Button next_button = 9;
     */
    nextButton?: Button;
    /**
     * @generated from protobuf field: string no_pan_text = 10;
     */
    noPanText: string;
}
/**
 * @generated from protobuf message onboarding.TriggerPanVerificationRequest
 */
export interface TriggerPanVerificationRequest {
    /**
     * @generated from protobuf field: core.RequestHeader req_header = 1;
     */
    reqHeader?: RequestHeader;
    /**
     * @generated from protobuf field: string pan_number = 2;
     */
    panNumber: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp date_of_birth = 3;
     */
    dateOfBirth?: Timestamp;
}
/**
 * @generated from protobuf message onboarding.TriggerPanVerificationResponse
 */
export interface TriggerPanVerificationResponse {
    /**
     * @generated from protobuf field: core.ResponseHeader resp_header = 1;
     */
    respHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: enums.VerificationResponseType response_type = 2;
     */
    responseType: VerificationResponseType;
    /**
     * @generated from protobuf field: string otp = 3;
     */
    otp: string;
}
/**
 * @generated from protobuf message onboarding.GetLivenessCheckScreenResponse
 */
export interface GetLivenessCheckScreenResponse {
    /**
     * @generated from protobuf field: core.ResponseHeader resp_header = 1;
     */
    respHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: string otp_to_show = 2;
     */
    otpToShow: string;
    /**
     * @generated from protobuf field: UI.Button next_button = 3;
     */
    nextButton?: Button;
}
/**
 * @generated from protobuf message onboarding.TriggerLivenessCheckRequest
 */
export interface TriggerLivenessCheckRequest {
    /**
     * @generated from protobuf field: core.RequestHeader req_header = 1;
     */
    reqHeader?: RequestHeader;
    /**
     * @generated from protobuf field: string otp_spoken = 2;
     */
    otpSpoken: string;
}
/**
 * @generated from protobuf message onboarding.TriggerLivenessCheckResponse
 */
export interface TriggerLivenessCheckResponse {
    /**
     * @generated from protobuf field: core.ResponseHeader resp_header = 1;
     */
    respHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: enums.LivenessCheckStatus liveness_check_status = 2;
     */
    livenessCheckStatus: LivenessCheckStatus;
}
/**
 * @generated from protobuf message onboarding.GetBiometricConsentScreenResponse
 */
export interface GetBiometricConsentScreenResponse {
    /**
     * @generated from protobuf field: core.ResponseHeader resp_header = 1;
     */
    respHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: UI.Image top_image = 2;
     */
    topImage?: Image;
    /**
     * @generated from protobuf field: UI.Text header = 3;
     */
    header?: Text;
    /**
     * @generated from protobuf field: UI.Text top_text = 4;
     */
    topText?: Text;
    /**
     * @generated from protobuf field: UI.Image lock_icon = 5;
     */
    lockIcon?: Image;
    /**
     * @generated from protobuf field: UI.Text paragraph_text = 6;
     */
    paragraphText?: Text;
    /**
     * @generated from protobuf field: UI.Button primary_button = 7;
     */
    primaryButton?: Button;
    /**
     * @generated from protobuf field: enums.ErrorType error_code = 8;
     */
    errorCode: ErrorType;
}
/**
 * @generated from protobuf message onboarding.GetOtherConsentsScreenResponse
 */
export interface GetOtherConsentsScreenResponse {
    /**
     * @generated from protobuf field: core.ResponseHeader resp_header = 1;
     */
    respHeader?: ResponseHeader;
    /**
     * Image to display on the permission screen
     *
     * @generated from protobuf field: UI.Image permission_image = 2;
     */
    permissionImage?: Image;
    /**
     * Header text to display on the permission screen
     *
     * @generated from protobuf field: UI.Text permission_header = 3;
     */
    permissionHeader?: Text;
    /**
     * Paragraph text to display on the permission screen
     *
     * @generated from protobuf field: UI.Text permission_paragraph = 4;
     */
    permissionParagraph?: Text;
    /**
     * Notifications consent component
     *
     * @generated from protobuf field: UI.NotificationsConsent notifications_consent = 5;
     */
    notificationsConsent?: NotificationsConsent;
    /**
     * Location consent component
     *
     * @generated from protobuf field: UI.LocationConsent location_consent = 6;
     */
    locationConsent?: LocationConsent;
    /**
     * Next button component
     *
     * @generated from protobuf field: UI.Button next_button = 7;
     */
    nextButton?: Button;
    /**
     * Agreement checkbox component
     *
     * @generated from protobuf field: UI.CheckBox agreement_checkbox = 8;
     */
    agreementCheckbox?: CheckBox;
    /**
     * Alert modal component
     *
     * @generated from protobuf field: UI.Modal alert_modal = 9;
     */
    alertModal?: Modal;
    /**
     * Error type (if any)
     *
     * @generated from protobuf field: enums.ErrorType error = 10;
     */
    error: ErrorType;
}
/**
 * @generated from protobuf message onboarding.GetCurrentOnboardingStageResponse
 */
export interface GetCurrentOnboardingStageResponse {
    /**
     * @generated from protobuf field: core.ResponseHeader resp_header = 1;
     */
    respHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: enums.OnboardingStage current_stage = 2;
     */
    currentStage: OnboardingStage;
}
// @generated message type with reflection information, may provide speed optimized methods
class TriggerPhoneVerificationResponse$Type extends MessageType<TriggerPhoneVerificationResponse> {
    constructor() {
        super("onboarding.TriggerPhoneVerificationResponse", [
            { no: 1, name: "resp_header", kind: "message", T: () => ResponseHeader },
            { no: 2, name: "response_type", kind: "enum", T: () => ["enums.VerificationResponseType", VerificationResponseType] }
        ]);
    }
    create(value?: PartialMessage<TriggerPhoneVerificationResponse>): TriggerPhoneVerificationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.responseType = 0;
        if (value !== undefined)
            reflectionMergePartial<TriggerPhoneVerificationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TriggerPhoneVerificationResponse): TriggerPhoneVerificationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* core.ResponseHeader resp_header */ 1:
                    message.respHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.respHeader);
                    break;
                case /* enums.VerificationResponseType response_type */ 2:
                    message.responseType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TriggerPhoneVerificationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* core.ResponseHeader resp_header = 1; */
        if (message.respHeader)
            ResponseHeader.internalBinaryWrite(message.respHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* enums.VerificationResponseType response_type = 2; */
        if (message.responseType !== 0)
            writer.tag(2, WireType.Varint).int32(message.responseType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message onboarding.TriggerPhoneVerificationResponse
 */
export const TriggerPhoneVerificationResponse = new TriggerPhoneVerificationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPhoneOTPVerificationScreenResponse$Type extends MessageType<GetPhoneOTPVerificationScreenResponse> {
    constructor() {
        super("onboarding.GetPhoneOTPVerificationScreenResponse", [
            { no: 1, name: "resp_header", kind: "message", T: () => ResponseHeader },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "wait_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "timer_in_seconds", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "resend_otp_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "primary_button", kind: "message", T: () => Button }
        ]);
    }
    create(value?: PartialMessage<GetPhoneOTPVerificationScreenResponse>): GetPhoneOTPVerificationScreenResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.title = "";
        message.description = "";
        message.waitText = "";
        message.timerInSeconds = 0;
        message.resendOtpText = "";
        if (value !== undefined)
            reflectionMergePartial<GetPhoneOTPVerificationScreenResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPhoneOTPVerificationScreenResponse): GetPhoneOTPVerificationScreenResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* core.ResponseHeader resp_header */ 1:
                    message.respHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.respHeader);
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* string wait_text */ 4:
                    message.waitText = reader.string();
                    break;
                case /* int32 timer_in_seconds */ 5:
                    message.timerInSeconds = reader.int32();
                    break;
                case /* string resend_otp_text */ 6:
                    message.resendOtpText = reader.string();
                    break;
                case /* UI.Button primary_button */ 7:
                    message.primaryButton = Button.internalBinaryRead(reader, reader.uint32(), options, message.primaryButton);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPhoneOTPVerificationScreenResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* core.ResponseHeader resp_header = 1; */
        if (message.respHeader)
            ResponseHeader.internalBinaryWrite(message.respHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* string wait_text = 4; */
        if (message.waitText !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.waitText);
        /* int32 timer_in_seconds = 5; */
        if (message.timerInSeconds !== 0)
            writer.tag(5, WireType.Varint).int32(message.timerInSeconds);
        /* string resend_otp_text = 6; */
        if (message.resendOtpText !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.resendOtpText);
        /* UI.Button primary_button = 7; */
        if (message.primaryButton)
            Button.internalBinaryWrite(message.primaryButton, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message onboarding.GetPhoneOTPVerificationScreenResponse
 */
export const GetPhoneOTPVerificationScreenResponse = new GetPhoneOTPVerificationScreenResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TriggerPhoneOTPVerificationRequest$Type extends MessageType<TriggerPhoneOTPVerificationRequest> {
    constructor() {
        super("onboarding.TriggerPhoneOTPVerificationRequest", [
            { no: 1, name: "req_header", kind: "message", T: () => RequestHeader },
            { no: 2, name: "otp", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TriggerPhoneOTPVerificationRequest>): TriggerPhoneOTPVerificationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.otp = "";
        if (value !== undefined)
            reflectionMergePartial<TriggerPhoneOTPVerificationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TriggerPhoneOTPVerificationRequest): TriggerPhoneOTPVerificationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* core.RequestHeader req_header */ 1:
                    message.reqHeader = RequestHeader.internalBinaryRead(reader, reader.uint32(), options, message.reqHeader);
                    break;
                case /* string otp */ 2:
                    message.otp = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TriggerPhoneOTPVerificationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* core.RequestHeader req_header = 1; */
        if (message.reqHeader)
            RequestHeader.internalBinaryWrite(message.reqHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string otp = 2; */
        if (message.otp !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.otp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message onboarding.TriggerPhoneOTPVerificationRequest
 */
export const TriggerPhoneOTPVerificationRequest = new TriggerPhoneOTPVerificationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TriggerPhoneOTPVerificationResponse$Type extends MessageType<TriggerPhoneOTPVerificationResponse> {
    constructor() {
        super("onboarding.TriggerPhoneOTPVerificationResponse", [
            { no: 1, name: "resp_header", kind: "message", T: () => ResponseHeader },
            { no: 2, name: "response_type", kind: "enum", T: () => ["enums.VerificationResponseType", VerificationResponseType] }
        ]);
    }
    create(value?: PartialMessage<TriggerPhoneOTPVerificationResponse>): TriggerPhoneOTPVerificationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.responseType = 0;
        if (value !== undefined)
            reflectionMergePartial<TriggerPhoneOTPVerificationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TriggerPhoneOTPVerificationResponse): TriggerPhoneOTPVerificationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* core.ResponseHeader resp_header */ 1:
                    message.respHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.respHeader);
                    break;
                case /* enums.VerificationResponseType response_type */ 2:
                    message.responseType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TriggerPhoneOTPVerificationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* core.ResponseHeader resp_header = 1; */
        if (message.respHeader)
            ResponseHeader.internalBinaryWrite(message.respHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* enums.VerificationResponseType response_type = 2; */
        if (message.responseType !== 0)
            writer.tag(2, WireType.Varint).int32(message.responseType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message onboarding.TriggerPhoneOTPVerificationResponse
 */
export const TriggerPhoneOTPVerificationResponse = new TriggerPhoneOTPVerificationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetEmailVerificationScreenResponse$Type extends MessageType<GetEmailVerificationScreenResponse> {
    constructor() {
        super("onboarding.GetEmailVerificationScreenResponse", [
            { no: 1, name: "resp_header", kind: "message", T: () => ResponseHeader },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sub_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "primary_button", kind: "message", T: () => Button },
            { no: 5, name: "img_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetEmailVerificationScreenResponse>): GetEmailVerificationScreenResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.title = "";
        message.subTitle = "";
        message.imgUrl = "";
        if (value !== undefined)
            reflectionMergePartial<GetEmailVerificationScreenResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetEmailVerificationScreenResponse): GetEmailVerificationScreenResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* core.ResponseHeader resp_header */ 1:
                    message.respHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.respHeader);
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string sub_title */ 3:
                    message.subTitle = reader.string();
                    break;
                case /* UI.Button primary_button */ 4:
                    message.primaryButton = Button.internalBinaryRead(reader, reader.uint32(), options, message.primaryButton);
                    break;
                case /* string img_url */ 5:
                    message.imgUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetEmailVerificationScreenResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* core.ResponseHeader resp_header = 1; */
        if (message.respHeader)
            ResponseHeader.internalBinaryWrite(message.respHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string sub_title = 3; */
        if (message.subTitle !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.subTitle);
        /* UI.Button primary_button = 4; */
        if (message.primaryButton)
            Button.internalBinaryWrite(message.primaryButton, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string img_url = 5; */
        if (message.imgUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.imgUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message onboarding.GetEmailVerificationScreenResponse
 */
export const GetEmailVerificationScreenResponse = new GetEmailVerificationScreenResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TriggerEmailVerificationRequest$Type extends MessageType<TriggerEmailVerificationRequest> {
    constructor() {
        super("onboarding.TriggerEmailVerificationRequest", [
            { no: 1, name: "req_header", kind: "message", T: () => RequestHeader },
            { no: 2, name: "email_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TriggerEmailVerificationRequest>): TriggerEmailVerificationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.emailId = "";
        message.userName = "";
        if (value !== undefined)
            reflectionMergePartial<TriggerEmailVerificationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TriggerEmailVerificationRequest): TriggerEmailVerificationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* core.RequestHeader req_header */ 1:
                    message.reqHeader = RequestHeader.internalBinaryRead(reader, reader.uint32(), options, message.reqHeader);
                    break;
                case /* string email_id */ 2:
                    message.emailId = reader.string();
                    break;
                case /* string user_name */ 3:
                    message.userName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TriggerEmailVerificationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* core.RequestHeader req_header = 1; */
        if (message.reqHeader)
            RequestHeader.internalBinaryWrite(message.reqHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string email_id = 2; */
        if (message.emailId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.emailId);
        /* string user_name = 3; */
        if (message.userName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.userName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message onboarding.TriggerEmailVerificationRequest
 */
export const TriggerEmailVerificationRequest = new TriggerEmailVerificationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TriggerEmailVerificationResponse$Type extends MessageType<TriggerEmailVerificationResponse> {
    constructor() {
        super("onboarding.TriggerEmailVerificationResponse", [
            { no: 1, name: "resp_header", kind: "message", T: () => ResponseHeader },
            { no: 2, name: "response_type", kind: "enum", T: () => ["enums.VerificationResponseType", VerificationResponseType] }
        ]);
    }
    create(value?: PartialMessage<TriggerEmailVerificationResponse>): TriggerEmailVerificationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.responseType = 0;
        if (value !== undefined)
            reflectionMergePartial<TriggerEmailVerificationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TriggerEmailVerificationResponse): TriggerEmailVerificationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* core.ResponseHeader resp_header */ 1:
                    message.respHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.respHeader);
                    break;
                case /* enums.VerificationResponseType response_type */ 2:
                    message.responseType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TriggerEmailVerificationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* core.ResponseHeader resp_header = 1; */
        if (message.respHeader)
            ResponseHeader.internalBinaryWrite(message.respHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* enums.VerificationResponseType response_type = 2; */
        if (message.responseType !== 0)
            writer.tag(2, WireType.Varint).int32(message.responseType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message onboarding.TriggerEmailVerificationResponse
 */
export const TriggerEmailVerificationResponse = new TriggerEmailVerificationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPhoneVerificationScreenResponse$Type extends MessageType<GetPhoneVerificationScreenResponse> {
    constructor() {
        super("onboarding.GetPhoneVerificationScreenResponse", [
            { no: 1, name: "resp_header", kind: "message", T: () => ResponseHeader },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sub_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "phone_number_heading", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "input_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "phone_number_breifing", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "img1_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "primary_button", kind: "message", T: () => Button }
        ]);
    }
    create(value?: PartialMessage<GetPhoneVerificationScreenResponse>): GetPhoneVerificationScreenResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.title = "";
        message.subTitle = "";
        message.phoneNumberHeading = "";
        message.inputNumber = "";
        message.phoneNumberBreifing = "";
        message.img1Url = "";
        if (value !== undefined)
            reflectionMergePartial<GetPhoneVerificationScreenResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPhoneVerificationScreenResponse): GetPhoneVerificationScreenResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* core.ResponseHeader resp_header */ 1:
                    message.respHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.respHeader);
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string sub_title */ 3:
                    message.subTitle = reader.string();
                    break;
                case /* string phone_number_heading */ 4:
                    message.phoneNumberHeading = reader.string();
                    break;
                case /* string input_number */ 5:
                    message.inputNumber = reader.string();
                    break;
                case /* string phone_number_breifing */ 6:
                    message.phoneNumberBreifing = reader.string();
                    break;
                case /* string img1_url */ 7:
                    message.img1Url = reader.string();
                    break;
                case /* UI.Button primary_button */ 8:
                    message.primaryButton = Button.internalBinaryRead(reader, reader.uint32(), options, message.primaryButton);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPhoneVerificationScreenResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* core.ResponseHeader resp_header = 1; */
        if (message.respHeader)
            ResponseHeader.internalBinaryWrite(message.respHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string sub_title = 3; */
        if (message.subTitle !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.subTitle);
        /* string phone_number_heading = 4; */
        if (message.phoneNumberHeading !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.phoneNumberHeading);
        /* string input_number = 5; */
        if (message.inputNumber !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.inputNumber);
        /* string phone_number_breifing = 6; */
        if (message.phoneNumberBreifing !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.phoneNumberBreifing);
        /* string img1_url = 7; */
        if (message.img1Url !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.img1Url);
        /* UI.Button primary_button = 8; */
        if (message.primaryButton)
            Button.internalBinaryWrite(message.primaryButton, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message onboarding.GetPhoneVerificationScreenResponse
 */
export const GetPhoneVerificationScreenResponse = new GetPhoneVerificationScreenResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPanVerificationScreenResponse$Type extends MessageType<GetPanVerificationScreenResponse> {
    constructor() {
        super("onboarding.GetPanVerificationScreenResponse", [
            { no: 1, name: "resp_header", kind: "message", T: () => ResponseHeader },
            { no: 2, name: "image_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "pan_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "date_of_birth", kind: "message", T: () => Timestamp },
            { no: 7, name: "details_storage_permission_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "info_usage_permission_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "next_button", kind: "message", T: () => Button },
            { no: 10, name: "no_pan_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPanVerificationScreenResponse>): GetPanVerificationScreenResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.imageUrl = "";
        message.title = "";
        message.description = "";
        message.panNumber = "";
        message.detailsStoragePermissionText = "";
        message.infoUsagePermissionText = "";
        message.noPanText = "";
        if (value !== undefined)
            reflectionMergePartial<GetPanVerificationScreenResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPanVerificationScreenResponse): GetPanVerificationScreenResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* core.ResponseHeader resp_header */ 1:
                    message.respHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.respHeader);
                    break;
                case /* string image_url */ 2:
                    message.imageUrl = reader.string();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                case /* string pan_number */ 5:
                    message.panNumber = reader.string();
                    break;
                case /* google.protobuf.Timestamp date_of_birth */ 6:
                    message.dateOfBirth = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.dateOfBirth);
                    break;
                case /* string details_storage_permission_text */ 7:
                    message.detailsStoragePermissionText = reader.string();
                    break;
                case /* string info_usage_permission_text */ 8:
                    message.infoUsagePermissionText = reader.string();
                    break;
                case /* UI.Button next_button */ 9:
                    message.nextButton = Button.internalBinaryRead(reader, reader.uint32(), options, message.nextButton);
                    break;
                case /* string no_pan_text */ 10:
                    message.noPanText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPanVerificationScreenResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* core.ResponseHeader resp_header = 1; */
        if (message.respHeader)
            ResponseHeader.internalBinaryWrite(message.respHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string image_url = 2; */
        if (message.imageUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.imageUrl);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        /* string pan_number = 5; */
        if (message.panNumber !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.panNumber);
        /* google.protobuf.Timestamp date_of_birth = 6; */
        if (message.dateOfBirth)
            Timestamp.internalBinaryWrite(message.dateOfBirth, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string details_storage_permission_text = 7; */
        if (message.detailsStoragePermissionText !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.detailsStoragePermissionText);
        /* string info_usage_permission_text = 8; */
        if (message.infoUsagePermissionText !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.infoUsagePermissionText);
        /* UI.Button next_button = 9; */
        if (message.nextButton)
            Button.internalBinaryWrite(message.nextButton, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string no_pan_text = 10; */
        if (message.noPanText !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.noPanText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message onboarding.GetPanVerificationScreenResponse
 */
export const GetPanVerificationScreenResponse = new GetPanVerificationScreenResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TriggerPanVerificationRequest$Type extends MessageType<TriggerPanVerificationRequest> {
    constructor() {
        super("onboarding.TriggerPanVerificationRequest", [
            { no: 1, name: "req_header", kind: "message", T: () => RequestHeader },
            { no: 2, name: "pan_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "date_of_birth", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<TriggerPanVerificationRequest>): TriggerPanVerificationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.panNumber = "";
        if (value !== undefined)
            reflectionMergePartial<TriggerPanVerificationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TriggerPanVerificationRequest): TriggerPanVerificationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* core.RequestHeader req_header */ 1:
                    message.reqHeader = RequestHeader.internalBinaryRead(reader, reader.uint32(), options, message.reqHeader);
                    break;
                case /* string pan_number */ 2:
                    message.panNumber = reader.string();
                    break;
                case /* google.protobuf.Timestamp date_of_birth */ 3:
                    message.dateOfBirth = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.dateOfBirth);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TriggerPanVerificationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* core.RequestHeader req_header = 1; */
        if (message.reqHeader)
            RequestHeader.internalBinaryWrite(message.reqHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string pan_number = 2; */
        if (message.panNumber !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.panNumber);
        /* google.protobuf.Timestamp date_of_birth = 3; */
        if (message.dateOfBirth)
            Timestamp.internalBinaryWrite(message.dateOfBirth, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message onboarding.TriggerPanVerificationRequest
 */
export const TriggerPanVerificationRequest = new TriggerPanVerificationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TriggerPanVerificationResponse$Type extends MessageType<TriggerPanVerificationResponse> {
    constructor() {
        super("onboarding.TriggerPanVerificationResponse", [
            { no: 1, name: "resp_header", kind: "message", T: () => ResponseHeader },
            { no: 2, name: "response_type", kind: "enum", T: () => ["enums.VerificationResponseType", VerificationResponseType] },
            { no: 3, name: "otp", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TriggerPanVerificationResponse>): TriggerPanVerificationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.responseType = 0;
        message.otp = "";
        if (value !== undefined)
            reflectionMergePartial<TriggerPanVerificationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TriggerPanVerificationResponse): TriggerPanVerificationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* core.ResponseHeader resp_header */ 1:
                    message.respHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.respHeader);
                    break;
                case /* enums.VerificationResponseType response_type */ 2:
                    message.responseType = reader.int32();
                    break;
                case /* string otp */ 3:
                    message.otp = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TriggerPanVerificationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* core.ResponseHeader resp_header = 1; */
        if (message.respHeader)
            ResponseHeader.internalBinaryWrite(message.respHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* enums.VerificationResponseType response_type = 2; */
        if (message.responseType !== 0)
            writer.tag(2, WireType.Varint).int32(message.responseType);
        /* string otp = 3; */
        if (message.otp !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.otp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message onboarding.TriggerPanVerificationResponse
 */
export const TriggerPanVerificationResponse = new TriggerPanVerificationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetLivenessCheckScreenResponse$Type extends MessageType<GetLivenessCheckScreenResponse> {
    constructor() {
        super("onboarding.GetLivenessCheckScreenResponse", [
            { no: 1, name: "resp_header", kind: "message", T: () => ResponseHeader },
            { no: 2, name: "otp_to_show", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "next_button", kind: "message", T: () => Button }
        ]);
    }
    create(value?: PartialMessage<GetLivenessCheckScreenResponse>): GetLivenessCheckScreenResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.otpToShow = "";
        if (value !== undefined)
            reflectionMergePartial<GetLivenessCheckScreenResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetLivenessCheckScreenResponse): GetLivenessCheckScreenResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* core.ResponseHeader resp_header */ 1:
                    message.respHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.respHeader);
                    break;
                case /* string otp_to_show */ 2:
                    message.otpToShow = reader.string();
                    break;
                case /* UI.Button next_button */ 3:
                    message.nextButton = Button.internalBinaryRead(reader, reader.uint32(), options, message.nextButton);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetLivenessCheckScreenResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* core.ResponseHeader resp_header = 1; */
        if (message.respHeader)
            ResponseHeader.internalBinaryWrite(message.respHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string otp_to_show = 2; */
        if (message.otpToShow !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.otpToShow);
        /* UI.Button next_button = 3; */
        if (message.nextButton)
            Button.internalBinaryWrite(message.nextButton, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message onboarding.GetLivenessCheckScreenResponse
 */
export const GetLivenessCheckScreenResponse = new GetLivenessCheckScreenResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TriggerLivenessCheckRequest$Type extends MessageType<TriggerLivenessCheckRequest> {
    constructor() {
        super("onboarding.TriggerLivenessCheckRequest", [
            { no: 1, name: "req_header", kind: "message", T: () => RequestHeader },
            { no: 2, name: "otp_spoken", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TriggerLivenessCheckRequest>): TriggerLivenessCheckRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.otpSpoken = "";
        if (value !== undefined)
            reflectionMergePartial<TriggerLivenessCheckRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TriggerLivenessCheckRequest): TriggerLivenessCheckRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* core.RequestHeader req_header */ 1:
                    message.reqHeader = RequestHeader.internalBinaryRead(reader, reader.uint32(), options, message.reqHeader);
                    break;
                case /* string otp_spoken */ 2:
                    message.otpSpoken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TriggerLivenessCheckRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* core.RequestHeader req_header = 1; */
        if (message.reqHeader)
            RequestHeader.internalBinaryWrite(message.reqHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string otp_spoken = 2; */
        if (message.otpSpoken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.otpSpoken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message onboarding.TriggerLivenessCheckRequest
 */
export const TriggerLivenessCheckRequest = new TriggerLivenessCheckRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TriggerLivenessCheckResponse$Type extends MessageType<TriggerLivenessCheckResponse> {
    constructor() {
        super("onboarding.TriggerLivenessCheckResponse", [
            { no: 1, name: "resp_header", kind: "message", T: () => ResponseHeader },
            { no: 2, name: "liveness_check_status", kind: "enum", T: () => ["enums.LivenessCheckStatus", LivenessCheckStatus, "LIVENESS_CHECK_STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<TriggerLivenessCheckResponse>): TriggerLivenessCheckResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.livenessCheckStatus = 0;
        if (value !== undefined)
            reflectionMergePartial<TriggerLivenessCheckResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TriggerLivenessCheckResponse): TriggerLivenessCheckResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* core.ResponseHeader resp_header */ 1:
                    message.respHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.respHeader);
                    break;
                case /* enums.LivenessCheckStatus liveness_check_status */ 2:
                    message.livenessCheckStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TriggerLivenessCheckResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* core.ResponseHeader resp_header = 1; */
        if (message.respHeader)
            ResponseHeader.internalBinaryWrite(message.respHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* enums.LivenessCheckStatus liveness_check_status = 2; */
        if (message.livenessCheckStatus !== 0)
            writer.tag(2, WireType.Varint).int32(message.livenessCheckStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message onboarding.TriggerLivenessCheckResponse
 */
export const TriggerLivenessCheckResponse = new TriggerLivenessCheckResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBiometricConsentScreenResponse$Type extends MessageType<GetBiometricConsentScreenResponse> {
    constructor() {
        super("onboarding.GetBiometricConsentScreenResponse", [
            { no: 1, name: "resp_header", kind: "message", T: () => ResponseHeader },
            { no: 2, name: "top_image", kind: "message", T: () => Image },
            { no: 3, name: "header", kind: "message", T: () => Text },
            { no: 4, name: "top_text", kind: "message", T: () => Text },
            { no: 5, name: "lock_icon", kind: "message", T: () => Image },
            { no: 6, name: "paragraph_text", kind: "message", T: () => Text },
            { no: 7, name: "primary_button", kind: "message", T: () => Button },
            { no: 8, name: "error_code", kind: "enum", T: () => ["enums.ErrorType", ErrorType] }
        ]);
    }
    create(value?: PartialMessage<GetBiometricConsentScreenResponse>): GetBiometricConsentScreenResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.errorCode = 0;
        if (value !== undefined)
            reflectionMergePartial<GetBiometricConsentScreenResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBiometricConsentScreenResponse): GetBiometricConsentScreenResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* core.ResponseHeader resp_header */ 1:
                    message.respHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.respHeader);
                    break;
                case /* UI.Image top_image */ 2:
                    message.topImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.topImage);
                    break;
                case /* UI.Text header */ 3:
                    message.header = Text.internalBinaryRead(reader, reader.uint32(), options, message.header);
                    break;
                case /* UI.Text top_text */ 4:
                    message.topText = Text.internalBinaryRead(reader, reader.uint32(), options, message.topText);
                    break;
                case /* UI.Image lock_icon */ 5:
                    message.lockIcon = Image.internalBinaryRead(reader, reader.uint32(), options, message.lockIcon);
                    break;
                case /* UI.Text paragraph_text */ 6:
                    message.paragraphText = Text.internalBinaryRead(reader, reader.uint32(), options, message.paragraphText);
                    break;
                case /* UI.Button primary_button */ 7:
                    message.primaryButton = Button.internalBinaryRead(reader, reader.uint32(), options, message.primaryButton);
                    break;
                case /* enums.ErrorType error_code */ 8:
                    message.errorCode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBiometricConsentScreenResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* core.ResponseHeader resp_header = 1; */
        if (message.respHeader)
            ResponseHeader.internalBinaryWrite(message.respHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* UI.Image top_image = 2; */
        if (message.topImage)
            Image.internalBinaryWrite(message.topImage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* UI.Text header = 3; */
        if (message.header)
            Text.internalBinaryWrite(message.header, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* UI.Text top_text = 4; */
        if (message.topText)
            Text.internalBinaryWrite(message.topText, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* UI.Image lock_icon = 5; */
        if (message.lockIcon)
            Image.internalBinaryWrite(message.lockIcon, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* UI.Text paragraph_text = 6; */
        if (message.paragraphText)
            Text.internalBinaryWrite(message.paragraphText, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* UI.Button primary_button = 7; */
        if (message.primaryButton)
            Button.internalBinaryWrite(message.primaryButton, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* enums.ErrorType error_code = 8; */
        if (message.errorCode !== 0)
            writer.tag(8, WireType.Varint).int32(message.errorCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message onboarding.GetBiometricConsentScreenResponse
 */
export const GetBiometricConsentScreenResponse = new GetBiometricConsentScreenResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOtherConsentsScreenResponse$Type extends MessageType<GetOtherConsentsScreenResponse> {
    constructor() {
        super("onboarding.GetOtherConsentsScreenResponse", [
            { no: 1, name: "resp_header", kind: "message", T: () => ResponseHeader },
            { no: 2, name: "permission_image", kind: "message", T: () => Image },
            { no: 3, name: "permission_header", kind: "message", T: () => Text },
            { no: 4, name: "permission_paragraph", kind: "message", T: () => Text },
            { no: 5, name: "notifications_consent", kind: "message", T: () => NotificationsConsent },
            { no: 6, name: "location_consent", kind: "message", T: () => LocationConsent },
            { no: 7, name: "next_button", kind: "message", T: () => Button },
            { no: 8, name: "agreement_checkbox", kind: "message", T: () => CheckBox },
            { no: 9, name: "alert_modal", kind: "message", T: () => Modal },
            { no: 10, name: "error", kind: "enum", T: () => ["enums.ErrorType", ErrorType] }
        ]);
    }
    create(value?: PartialMessage<GetOtherConsentsScreenResponse>): GetOtherConsentsScreenResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.error = 0;
        if (value !== undefined)
            reflectionMergePartial<GetOtherConsentsScreenResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOtherConsentsScreenResponse): GetOtherConsentsScreenResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* core.ResponseHeader resp_header */ 1:
                    message.respHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.respHeader);
                    break;
                case /* UI.Image permission_image */ 2:
                    message.permissionImage = Image.internalBinaryRead(reader, reader.uint32(), options, message.permissionImage);
                    break;
                case /* UI.Text permission_header */ 3:
                    message.permissionHeader = Text.internalBinaryRead(reader, reader.uint32(), options, message.permissionHeader);
                    break;
                case /* UI.Text permission_paragraph */ 4:
                    message.permissionParagraph = Text.internalBinaryRead(reader, reader.uint32(), options, message.permissionParagraph);
                    break;
                case /* UI.NotificationsConsent notifications_consent */ 5:
                    message.notificationsConsent = NotificationsConsent.internalBinaryRead(reader, reader.uint32(), options, message.notificationsConsent);
                    break;
                case /* UI.LocationConsent location_consent */ 6:
                    message.locationConsent = LocationConsent.internalBinaryRead(reader, reader.uint32(), options, message.locationConsent);
                    break;
                case /* UI.Button next_button */ 7:
                    message.nextButton = Button.internalBinaryRead(reader, reader.uint32(), options, message.nextButton);
                    break;
                case /* UI.CheckBox agreement_checkbox */ 8:
                    message.agreementCheckbox = CheckBox.internalBinaryRead(reader, reader.uint32(), options, message.agreementCheckbox);
                    break;
                case /* UI.Modal alert_modal */ 9:
                    message.alertModal = Modal.internalBinaryRead(reader, reader.uint32(), options, message.alertModal);
                    break;
                case /* enums.ErrorType error */ 10:
                    message.error = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOtherConsentsScreenResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* core.ResponseHeader resp_header = 1; */
        if (message.respHeader)
            ResponseHeader.internalBinaryWrite(message.respHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* UI.Image permission_image = 2; */
        if (message.permissionImage)
            Image.internalBinaryWrite(message.permissionImage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* UI.Text permission_header = 3; */
        if (message.permissionHeader)
            Text.internalBinaryWrite(message.permissionHeader, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* UI.Text permission_paragraph = 4; */
        if (message.permissionParagraph)
            Text.internalBinaryWrite(message.permissionParagraph, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* UI.NotificationsConsent notifications_consent = 5; */
        if (message.notificationsConsent)
            NotificationsConsent.internalBinaryWrite(message.notificationsConsent, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* UI.LocationConsent location_consent = 6; */
        if (message.locationConsent)
            LocationConsent.internalBinaryWrite(message.locationConsent, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* UI.Button next_button = 7; */
        if (message.nextButton)
            Button.internalBinaryWrite(message.nextButton, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* UI.CheckBox agreement_checkbox = 8; */
        if (message.agreementCheckbox)
            CheckBox.internalBinaryWrite(message.agreementCheckbox, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* UI.Modal alert_modal = 9; */
        if (message.alertModal)
            Modal.internalBinaryWrite(message.alertModal, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* enums.ErrorType error = 10; */
        if (message.error !== 0)
            writer.tag(10, WireType.Varint).int32(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message onboarding.GetOtherConsentsScreenResponse
 */
export const GetOtherConsentsScreenResponse = new GetOtherConsentsScreenResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCurrentOnboardingStageResponse$Type extends MessageType<GetCurrentOnboardingStageResponse> {
    constructor() {
        super("onboarding.GetCurrentOnboardingStageResponse", [
            { no: 1, name: "resp_header", kind: "message", T: () => ResponseHeader },
            { no: 2, name: "current_stage", kind: "enum", T: () => ["enums.OnboardingStage", OnboardingStage] }
        ]);
    }
    create(value?: PartialMessage<GetCurrentOnboardingStageResponse>): GetCurrentOnboardingStageResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.currentStage = 0;
        if (value !== undefined)
            reflectionMergePartial<GetCurrentOnboardingStageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCurrentOnboardingStageResponse): GetCurrentOnboardingStageResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* core.ResponseHeader resp_header */ 1:
                    message.respHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.respHeader);
                    break;
                case /* enums.OnboardingStage current_stage */ 2:
                    message.currentStage = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCurrentOnboardingStageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* core.ResponseHeader resp_header = 1; */
        if (message.respHeader)
            ResponseHeader.internalBinaryWrite(message.respHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* enums.OnboardingStage current_stage = 2; */
        if (message.currentStage !== 0)
            writer.tag(2, WireType.Varint).int32(message.currentStage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message onboarding.GetCurrentOnboardingStageResponse
 */
export const GetCurrentOnboardingStageResponse = new GetCurrentOnboardingStageResponse$Type();
