// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.27.0
// source: protos-frontend/onboarding/rpc.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Timestamp } from "../../google/protobuf/timestamp";
import { Button } from "../UI/Button";
import { CheckBox } from "../UI/CheckBox";
import { Image } from "../UI/Image";
import { LocationConsent } from "../UI/LocationConsent";
import { Modal } from "../UI/Modal";
import { NotificationsConsent } from "../UI/NotificationsConsent";
import { Text } from "../UI/Text";
import {
  ErrorType,
  errorTypeFromJSON,
  errorTypeToJSON,
  LivenessCheckStatus,
  livenessCheckStatusFromJSON,
  livenessCheckStatusToJSON,
  VerificationResponseType,
  verificationResponseTypeFromJSON,
  verificationResponseTypeToJSON,
} from "../enums/ResponseType";

export const protobufPackage = "onboarding";

export interface TriggerPhoneVerificationResponse {
  responseType: VerificationResponseType;
}

export interface GetPhoneOTPVerificationScreenResponse {
  title: string;
  description: string;
  waitText: string;
  timerInSeconds: number;
  resendOtpText: string;
  primaryButton: Button | undefined;
}

export interface TriggerPhoneOTPVerificationRequest {
  otp: string;
}

export interface TriggerPhoneOTPVerificationResponse {
  responseType: VerificationResponseType;
}

export interface GetEmailVerificationScreenResponse {
  title: string;
  subTitle: string;
  primaryButton: Button | undefined;
  imgUrl: string;
}

export interface TriggerEmailVerificationRequest {
  emailId: string;
  userName: string;
}

export interface TriggerEmailVerificationResponse {
  responseType: VerificationResponseType;
}

export interface GetPhoneVerificationScreenResponse {
  title: string;
  subTitle: string;
  phoneNumberHeading: string;
  inputNumber: string;
  phoneNumberBreifing: string;
  img1Url: string;
  primaryButton: Button | undefined;
}

export interface GetPanVerificationScreenResponse {
  imageUrl: string;
  title: string;
  description: string;
  panNumber: string;
  dateOfBirth: Date | undefined;
  detailsStoragePermissionText: string;
  infoUsagePermissionText: string;
  nextButton: Button | undefined;
  noPanText: string;
}

export interface TriggerPanVerificationRequest {
  panNumber: string;
  dateOfBirth: Date | undefined;
}

export interface TriggerPanVerificationResponse {
  responseType: VerificationResponseType;
  otp: string;
}

export interface GetLivenessCheckScreenResponse {
  otpToShow: string;
  nextButton: Button | undefined;
}

export interface TriggerLivenessCheckRequest {
  otpSpoken: string;
}

export interface TriggerLivenessCheckResponse {
  livenessCheckStatus: LivenessCheckStatus;
}

/** Define the response message */
export interface GetBiometricConsentScreenResponse {
  topImage: Image | undefined;
  header: Text | undefined;
  topText: Text | undefined;
  lockIcon: Image | undefined;
  paragraphText: Text | undefined;
  primaryButton: Button | undefined;
  errorCode: ErrorType;
}

export interface GetOtherConsentsScreenResponse {
  /** Image to display on the permission screen */
  permissionImage:
    | Image
    | undefined;
  /** Header text to display on the permission screen */
  permissionHeader:
    | Text
    | undefined;
  /** Paragraph text to display on the permission screen */
  permissionParagraph:
    | Text
    | undefined;
  /** Notifications consent component */
  notificationsConsent:
    | NotificationsConsent
    | undefined;
  /** Location consent component */
  locationConsent:
    | LocationConsent
    | undefined;
  /** Next button component */
  nextButton:
    | Button
    | undefined;
  /** Agreement checkbox component */
  agreementCheckbox:
    | CheckBox
    | undefined;
  /** Alert modal component */
  alertModal:
    | Modal
    | undefined;
  /** Error type (if any) */
  error: ErrorType;
}

function createBaseTriggerPhoneVerificationResponse(): TriggerPhoneVerificationResponse {
  return { responseType: 0 };
}

export const TriggerPhoneVerificationResponse = {
  encode(message: TriggerPhoneVerificationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.responseType !== 0) {
      writer.uint32(8).int32(message.responseType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TriggerPhoneVerificationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriggerPhoneVerificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.responseType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TriggerPhoneVerificationResponse {
    return { responseType: isSet(object.responseType) ? verificationResponseTypeFromJSON(object.responseType) : 0 };
  },

  toJSON(message: TriggerPhoneVerificationResponse): unknown {
    const obj: any = {};
    if (message.responseType !== 0) {
      obj.responseType = verificationResponseTypeToJSON(message.responseType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TriggerPhoneVerificationResponse>, I>>(
    base?: I,
  ): TriggerPhoneVerificationResponse {
    return TriggerPhoneVerificationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TriggerPhoneVerificationResponse>, I>>(
    object: I,
  ): TriggerPhoneVerificationResponse {
    const message = createBaseTriggerPhoneVerificationResponse();
    message.responseType = object.responseType ?? 0;
    return message;
  },
};

function createBaseGetPhoneOTPVerificationScreenResponse(): GetPhoneOTPVerificationScreenResponse {
  return { title: "", description: "", waitText: "", timerInSeconds: 0, resendOtpText: "", primaryButton: undefined };
}

export const GetPhoneOTPVerificationScreenResponse = {
  encode(message: GetPhoneOTPVerificationScreenResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.waitText !== "") {
      writer.uint32(26).string(message.waitText);
    }
    if (message.timerInSeconds !== 0) {
      writer.uint32(32).int32(message.timerInSeconds);
    }
    if (message.resendOtpText !== "") {
      writer.uint32(42).string(message.resendOtpText);
    }
    if (message.primaryButton !== undefined) {
      Button.encode(message.primaryButton, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPhoneOTPVerificationScreenResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPhoneOTPVerificationScreenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.waitText = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.timerInSeconds = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.resendOtpText = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.primaryButton = Button.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPhoneOTPVerificationScreenResponse {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      waitText: isSet(object.waitText) ? globalThis.String(object.waitText) : "",
      timerInSeconds: isSet(object.timerInSeconds) ? globalThis.Number(object.timerInSeconds) : 0,
      resendOtpText: isSet(object.resendOtpText) ? globalThis.String(object.resendOtpText) : "",
      primaryButton: isSet(object.primaryButton) ? Button.fromJSON(object.primaryButton) : undefined,
    };
  },

  toJSON(message: GetPhoneOTPVerificationScreenResponse): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.waitText !== "") {
      obj.waitText = message.waitText;
    }
    if (message.timerInSeconds !== 0) {
      obj.timerInSeconds = Math.round(message.timerInSeconds);
    }
    if (message.resendOtpText !== "") {
      obj.resendOtpText = message.resendOtpText;
    }
    if (message.primaryButton !== undefined) {
      obj.primaryButton = Button.toJSON(message.primaryButton);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPhoneOTPVerificationScreenResponse>, I>>(
    base?: I,
  ): GetPhoneOTPVerificationScreenResponse {
    return GetPhoneOTPVerificationScreenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPhoneOTPVerificationScreenResponse>, I>>(
    object: I,
  ): GetPhoneOTPVerificationScreenResponse {
    const message = createBaseGetPhoneOTPVerificationScreenResponse();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.waitText = object.waitText ?? "";
    message.timerInSeconds = object.timerInSeconds ?? 0;
    message.resendOtpText = object.resendOtpText ?? "";
    message.primaryButton = (object.primaryButton !== undefined && object.primaryButton !== null)
      ? Button.fromPartial(object.primaryButton)
      : undefined;
    return message;
  },
};

function createBaseTriggerPhoneOTPVerificationRequest(): TriggerPhoneOTPVerificationRequest {
  return { otp: "" };
}

export const TriggerPhoneOTPVerificationRequest = {
  encode(message: TriggerPhoneOTPVerificationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.otp !== "") {
      writer.uint32(10).string(message.otp);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TriggerPhoneOTPVerificationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriggerPhoneOTPVerificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.otp = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TriggerPhoneOTPVerificationRequest {
    return { otp: isSet(object.otp) ? globalThis.String(object.otp) : "" };
  },

  toJSON(message: TriggerPhoneOTPVerificationRequest): unknown {
    const obj: any = {};
    if (message.otp !== "") {
      obj.otp = message.otp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TriggerPhoneOTPVerificationRequest>, I>>(
    base?: I,
  ): TriggerPhoneOTPVerificationRequest {
    return TriggerPhoneOTPVerificationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TriggerPhoneOTPVerificationRequest>, I>>(
    object: I,
  ): TriggerPhoneOTPVerificationRequest {
    const message = createBaseTriggerPhoneOTPVerificationRequest();
    message.otp = object.otp ?? "";
    return message;
  },
};

function createBaseTriggerPhoneOTPVerificationResponse(): TriggerPhoneOTPVerificationResponse {
  return { responseType: 0 };
}

export const TriggerPhoneOTPVerificationResponse = {
  encode(message: TriggerPhoneOTPVerificationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.responseType !== 0) {
      writer.uint32(8).int32(message.responseType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TriggerPhoneOTPVerificationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriggerPhoneOTPVerificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.responseType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TriggerPhoneOTPVerificationResponse {
    return { responseType: isSet(object.responseType) ? verificationResponseTypeFromJSON(object.responseType) : 0 };
  },

  toJSON(message: TriggerPhoneOTPVerificationResponse): unknown {
    const obj: any = {};
    if (message.responseType !== 0) {
      obj.responseType = verificationResponseTypeToJSON(message.responseType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TriggerPhoneOTPVerificationResponse>, I>>(
    base?: I,
  ): TriggerPhoneOTPVerificationResponse {
    return TriggerPhoneOTPVerificationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TriggerPhoneOTPVerificationResponse>, I>>(
    object: I,
  ): TriggerPhoneOTPVerificationResponse {
    const message = createBaseTriggerPhoneOTPVerificationResponse();
    message.responseType = object.responseType ?? 0;
    return message;
  },
};

function createBaseGetEmailVerificationScreenResponse(): GetEmailVerificationScreenResponse {
  return { title: "", subTitle: "", primaryButton: undefined, imgUrl: "" };
}

export const GetEmailVerificationScreenResponse = {
  encode(message: GetEmailVerificationScreenResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.subTitle !== "") {
      writer.uint32(18).string(message.subTitle);
    }
    if (message.primaryButton !== undefined) {
      Button.encode(message.primaryButton, writer.uint32(26).fork()).ldelim();
    }
    if (message.imgUrl !== "") {
      writer.uint32(34).string(message.imgUrl);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetEmailVerificationScreenResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEmailVerificationScreenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.subTitle = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.primaryButton = Button.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.imgUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEmailVerificationScreenResponse {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      subTitle: isSet(object.subTitle) ? globalThis.String(object.subTitle) : "",
      primaryButton: isSet(object.primaryButton) ? Button.fromJSON(object.primaryButton) : undefined,
      imgUrl: isSet(object.imgUrl) ? globalThis.String(object.imgUrl) : "",
    };
  },

  toJSON(message: GetEmailVerificationScreenResponse): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.subTitle !== "") {
      obj.subTitle = message.subTitle;
    }
    if (message.primaryButton !== undefined) {
      obj.primaryButton = Button.toJSON(message.primaryButton);
    }
    if (message.imgUrl !== "") {
      obj.imgUrl = message.imgUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetEmailVerificationScreenResponse>, I>>(
    base?: I,
  ): GetEmailVerificationScreenResponse {
    return GetEmailVerificationScreenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetEmailVerificationScreenResponse>, I>>(
    object: I,
  ): GetEmailVerificationScreenResponse {
    const message = createBaseGetEmailVerificationScreenResponse();
    message.title = object.title ?? "";
    message.subTitle = object.subTitle ?? "";
    message.primaryButton = (object.primaryButton !== undefined && object.primaryButton !== null)
      ? Button.fromPartial(object.primaryButton)
      : undefined;
    message.imgUrl = object.imgUrl ?? "";
    return message;
  },
};

function createBaseTriggerEmailVerificationRequest(): TriggerEmailVerificationRequest {
  return { emailId: "", userName: "" };
}

export const TriggerEmailVerificationRequest = {
  encode(message: TriggerEmailVerificationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.emailId !== "") {
      writer.uint32(10).string(message.emailId);
    }
    if (message.userName !== "") {
      writer.uint32(18).string(message.userName);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TriggerEmailVerificationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriggerEmailVerificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.emailId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TriggerEmailVerificationRequest {
    return {
      emailId: isSet(object.emailId) ? globalThis.String(object.emailId) : "",
      userName: isSet(object.userName) ? globalThis.String(object.userName) : "",
    };
  },

  toJSON(message: TriggerEmailVerificationRequest): unknown {
    const obj: any = {};
    if (message.emailId !== "") {
      obj.emailId = message.emailId;
    }
    if (message.userName !== "") {
      obj.userName = message.userName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TriggerEmailVerificationRequest>, I>>(base?: I): TriggerEmailVerificationRequest {
    return TriggerEmailVerificationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TriggerEmailVerificationRequest>, I>>(
    object: I,
  ): TriggerEmailVerificationRequest {
    const message = createBaseTriggerEmailVerificationRequest();
    message.emailId = object.emailId ?? "";
    message.userName = object.userName ?? "";
    return message;
  },
};

function createBaseTriggerEmailVerificationResponse(): TriggerEmailVerificationResponse {
  return { responseType: 0 };
}

export const TriggerEmailVerificationResponse = {
  encode(message: TriggerEmailVerificationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.responseType !== 0) {
      writer.uint32(8).int32(message.responseType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TriggerEmailVerificationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriggerEmailVerificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.responseType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TriggerEmailVerificationResponse {
    return { responseType: isSet(object.responseType) ? verificationResponseTypeFromJSON(object.responseType) : 0 };
  },

  toJSON(message: TriggerEmailVerificationResponse): unknown {
    const obj: any = {};
    if (message.responseType !== 0) {
      obj.responseType = verificationResponseTypeToJSON(message.responseType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TriggerEmailVerificationResponse>, I>>(
    base?: I,
  ): TriggerEmailVerificationResponse {
    return TriggerEmailVerificationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TriggerEmailVerificationResponse>, I>>(
    object: I,
  ): TriggerEmailVerificationResponse {
    const message = createBaseTriggerEmailVerificationResponse();
    message.responseType = object.responseType ?? 0;
    return message;
  },
};

function createBaseGetPhoneVerificationScreenResponse(): GetPhoneVerificationScreenResponse {
  return {
    title: "",
    subTitle: "",
    phoneNumberHeading: "",
    inputNumber: "",
    phoneNumberBreifing: "",
    img1Url: "",
    primaryButton: undefined,
  };
}

export const GetPhoneVerificationScreenResponse = {
  encode(message: GetPhoneVerificationScreenResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.subTitle !== "") {
      writer.uint32(18).string(message.subTitle);
    }
    if (message.phoneNumberHeading !== "") {
      writer.uint32(26).string(message.phoneNumberHeading);
    }
    if (message.inputNumber !== "") {
      writer.uint32(34).string(message.inputNumber);
    }
    if (message.phoneNumberBreifing !== "") {
      writer.uint32(42).string(message.phoneNumberBreifing);
    }
    if (message.img1Url !== "") {
      writer.uint32(50).string(message.img1Url);
    }
    if (message.primaryButton !== undefined) {
      Button.encode(message.primaryButton, writer.uint32(66).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPhoneVerificationScreenResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPhoneVerificationScreenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.subTitle = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.phoneNumberHeading = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.inputNumber = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.phoneNumberBreifing = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.img1Url = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.primaryButton = Button.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPhoneVerificationScreenResponse {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      subTitle: isSet(object.subTitle) ? globalThis.String(object.subTitle) : "",
      phoneNumberHeading: isSet(object.phoneNumberHeading) ? globalThis.String(object.phoneNumberHeading) : "",
      inputNumber: isSet(object.inputNumber) ? globalThis.String(object.inputNumber) : "",
      phoneNumberBreifing: isSet(object.phoneNumberBreifing) ? globalThis.String(object.phoneNumberBreifing) : "",
      img1Url: isSet(object.img1Url) ? globalThis.String(object.img1Url) : "",
      primaryButton: isSet(object.primaryButton) ? Button.fromJSON(object.primaryButton) : undefined,
    };
  },

  toJSON(message: GetPhoneVerificationScreenResponse): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.subTitle !== "") {
      obj.subTitle = message.subTitle;
    }
    if (message.phoneNumberHeading !== "") {
      obj.phoneNumberHeading = message.phoneNumberHeading;
    }
    if (message.inputNumber !== "") {
      obj.inputNumber = message.inputNumber;
    }
    if (message.phoneNumberBreifing !== "") {
      obj.phoneNumberBreifing = message.phoneNumberBreifing;
    }
    if (message.img1Url !== "") {
      obj.img1Url = message.img1Url;
    }
    if (message.primaryButton !== undefined) {
      obj.primaryButton = Button.toJSON(message.primaryButton);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPhoneVerificationScreenResponse>, I>>(
    base?: I,
  ): GetPhoneVerificationScreenResponse {
    return GetPhoneVerificationScreenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPhoneVerificationScreenResponse>, I>>(
    object: I,
  ): GetPhoneVerificationScreenResponse {
    const message = createBaseGetPhoneVerificationScreenResponse();
    message.title = object.title ?? "";
    message.subTitle = object.subTitle ?? "";
    message.phoneNumberHeading = object.phoneNumberHeading ?? "";
    message.inputNumber = object.inputNumber ?? "";
    message.phoneNumberBreifing = object.phoneNumberBreifing ?? "";
    message.img1Url = object.img1Url ?? "";
    message.primaryButton = (object.primaryButton !== undefined && object.primaryButton !== null)
      ? Button.fromPartial(object.primaryButton)
      : undefined;
    return message;
  },
};

function createBaseGetPanVerificationScreenResponse(): GetPanVerificationScreenResponse {
  return {
    imageUrl: "",
    title: "",
    description: "",
    panNumber: "",
    dateOfBirth: undefined,
    detailsStoragePermissionText: "",
    infoUsagePermissionText: "",
    nextButton: undefined,
    noPanText: "",
  };
}

export const GetPanVerificationScreenResponse = {
  encode(message: GetPanVerificationScreenResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.imageUrl !== "") {
      writer.uint32(10).string(message.imageUrl);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.panNumber !== "") {
      writer.uint32(34).string(message.panNumber);
    }
    if (message.dateOfBirth !== undefined) {
      Timestamp.encode(toTimestamp(message.dateOfBirth), writer.uint32(42).fork()).ldelim();
    }
    if (message.detailsStoragePermissionText !== "") {
      writer.uint32(50).string(message.detailsStoragePermissionText);
    }
    if (message.infoUsagePermissionText !== "") {
      writer.uint32(58).string(message.infoUsagePermissionText);
    }
    if (message.nextButton !== undefined) {
      Button.encode(message.nextButton, writer.uint32(66).fork()).ldelim();
    }
    if (message.noPanText !== "") {
      writer.uint32(74).string(message.noPanText);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPanVerificationScreenResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPanVerificationScreenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.imageUrl = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.panNumber = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.dateOfBirth = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.detailsStoragePermissionText = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.infoUsagePermissionText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.nextButton = Button.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.noPanText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPanVerificationScreenResponse {
    return {
      imageUrl: isSet(object.imageUrl) ? globalThis.String(object.imageUrl) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      panNumber: isSet(object.panNumber) ? globalThis.String(object.panNumber) : "",
      dateOfBirth: isSet(object.dateOfBirth) ? fromJsonTimestamp(object.dateOfBirth) : undefined,
      detailsStoragePermissionText: isSet(object.detailsStoragePermissionText)
        ? globalThis.String(object.detailsStoragePermissionText)
        : "",
      infoUsagePermissionText: isSet(object.infoUsagePermissionText)
        ? globalThis.String(object.infoUsagePermissionText)
        : "",
      nextButton: isSet(object.nextButton) ? Button.fromJSON(object.nextButton) : undefined,
      noPanText: isSet(object.noPanText) ? globalThis.String(object.noPanText) : "",
    };
  },

  toJSON(message: GetPanVerificationScreenResponse): unknown {
    const obj: any = {};
    if (message.imageUrl !== "") {
      obj.imageUrl = message.imageUrl;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.panNumber !== "") {
      obj.panNumber = message.panNumber;
    }
    if (message.dateOfBirth !== undefined) {
      obj.dateOfBirth = message.dateOfBirth.toISOString();
    }
    if (message.detailsStoragePermissionText !== "") {
      obj.detailsStoragePermissionText = message.detailsStoragePermissionText;
    }
    if (message.infoUsagePermissionText !== "") {
      obj.infoUsagePermissionText = message.infoUsagePermissionText;
    }
    if (message.nextButton !== undefined) {
      obj.nextButton = Button.toJSON(message.nextButton);
    }
    if (message.noPanText !== "") {
      obj.noPanText = message.noPanText;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPanVerificationScreenResponse>, I>>(
    base?: I,
  ): GetPanVerificationScreenResponse {
    return GetPanVerificationScreenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPanVerificationScreenResponse>, I>>(
    object: I,
  ): GetPanVerificationScreenResponse {
    const message = createBaseGetPanVerificationScreenResponse();
    message.imageUrl = object.imageUrl ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.panNumber = object.panNumber ?? "";
    message.dateOfBirth = object.dateOfBirth ?? undefined;
    message.detailsStoragePermissionText = object.detailsStoragePermissionText ?? "";
    message.infoUsagePermissionText = object.infoUsagePermissionText ?? "";
    message.nextButton = (object.nextButton !== undefined && object.nextButton !== null)
      ? Button.fromPartial(object.nextButton)
      : undefined;
    message.noPanText = object.noPanText ?? "";
    return message;
  },
};

function createBaseTriggerPanVerificationRequest(): TriggerPanVerificationRequest {
  return { panNumber: "", dateOfBirth: undefined };
}

export const TriggerPanVerificationRequest = {
  encode(message: TriggerPanVerificationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.panNumber !== "") {
      writer.uint32(10).string(message.panNumber);
    }
    if (message.dateOfBirth !== undefined) {
      Timestamp.encode(toTimestamp(message.dateOfBirth), writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TriggerPanVerificationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriggerPanVerificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.panNumber = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dateOfBirth = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TriggerPanVerificationRequest {
    return {
      panNumber: isSet(object.panNumber) ? globalThis.String(object.panNumber) : "",
      dateOfBirth: isSet(object.dateOfBirth) ? fromJsonTimestamp(object.dateOfBirth) : undefined,
    };
  },

  toJSON(message: TriggerPanVerificationRequest): unknown {
    const obj: any = {};
    if (message.panNumber !== "") {
      obj.panNumber = message.panNumber;
    }
    if (message.dateOfBirth !== undefined) {
      obj.dateOfBirth = message.dateOfBirth.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TriggerPanVerificationRequest>, I>>(base?: I): TriggerPanVerificationRequest {
    return TriggerPanVerificationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TriggerPanVerificationRequest>, I>>(
    object: I,
  ): TriggerPanVerificationRequest {
    const message = createBaseTriggerPanVerificationRequest();
    message.panNumber = object.panNumber ?? "";
    message.dateOfBirth = object.dateOfBirth ?? undefined;
    return message;
  },
};

function createBaseTriggerPanVerificationResponse(): TriggerPanVerificationResponse {
  return { responseType: 0, otp: "" };
}

export const TriggerPanVerificationResponse = {
  encode(message: TriggerPanVerificationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.responseType !== 0) {
      writer.uint32(8).int32(message.responseType);
    }
    if (message.otp !== "") {
      writer.uint32(18).string(message.otp);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TriggerPanVerificationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriggerPanVerificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.responseType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.otp = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TriggerPanVerificationResponse {
    return {
      responseType: isSet(object.responseType) ? verificationResponseTypeFromJSON(object.responseType) : 0,
      otp: isSet(object.otp) ? globalThis.String(object.otp) : "",
    };
  },

  toJSON(message: TriggerPanVerificationResponse): unknown {
    const obj: any = {};
    if (message.responseType !== 0) {
      obj.responseType = verificationResponseTypeToJSON(message.responseType);
    }
    if (message.otp !== "") {
      obj.otp = message.otp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TriggerPanVerificationResponse>, I>>(base?: I): TriggerPanVerificationResponse {
    return TriggerPanVerificationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TriggerPanVerificationResponse>, I>>(
    object: I,
  ): TriggerPanVerificationResponse {
    const message = createBaseTriggerPanVerificationResponse();
    message.responseType = object.responseType ?? 0;
    message.otp = object.otp ?? "";
    return message;
  },
};

function createBaseGetLivenessCheckScreenResponse(): GetLivenessCheckScreenResponse {
  return { otpToShow: "", nextButton: undefined };
}

export const GetLivenessCheckScreenResponse = {
  encode(message: GetLivenessCheckScreenResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.otpToShow !== "") {
      writer.uint32(10).string(message.otpToShow);
    }
    if (message.nextButton !== undefined) {
      Button.encode(message.nextButton, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLivenessCheckScreenResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLivenessCheckScreenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.otpToShow = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextButton = Button.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLivenessCheckScreenResponse {
    return {
      otpToShow: isSet(object.otpToShow) ? globalThis.String(object.otpToShow) : "",
      nextButton: isSet(object.nextButton) ? Button.fromJSON(object.nextButton) : undefined,
    };
  },

  toJSON(message: GetLivenessCheckScreenResponse): unknown {
    const obj: any = {};
    if (message.otpToShow !== "") {
      obj.otpToShow = message.otpToShow;
    }
    if (message.nextButton !== undefined) {
      obj.nextButton = Button.toJSON(message.nextButton);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLivenessCheckScreenResponse>, I>>(base?: I): GetLivenessCheckScreenResponse {
    return GetLivenessCheckScreenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLivenessCheckScreenResponse>, I>>(
    object: I,
  ): GetLivenessCheckScreenResponse {
    const message = createBaseGetLivenessCheckScreenResponse();
    message.otpToShow = object.otpToShow ?? "";
    message.nextButton = (object.nextButton !== undefined && object.nextButton !== null)
      ? Button.fromPartial(object.nextButton)
      : undefined;
    return message;
  },
};

function createBaseTriggerLivenessCheckRequest(): TriggerLivenessCheckRequest {
  return { otpSpoken: "" };
}

export const TriggerLivenessCheckRequest = {
  encode(message: TriggerLivenessCheckRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.otpSpoken !== "") {
      writer.uint32(10).string(message.otpSpoken);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TriggerLivenessCheckRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriggerLivenessCheckRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.otpSpoken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TriggerLivenessCheckRequest {
    return { otpSpoken: isSet(object.otpSpoken) ? globalThis.String(object.otpSpoken) : "" };
  },

  toJSON(message: TriggerLivenessCheckRequest): unknown {
    const obj: any = {};
    if (message.otpSpoken !== "") {
      obj.otpSpoken = message.otpSpoken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TriggerLivenessCheckRequest>, I>>(base?: I): TriggerLivenessCheckRequest {
    return TriggerLivenessCheckRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TriggerLivenessCheckRequest>, I>>(object: I): TriggerLivenessCheckRequest {
    const message = createBaseTriggerLivenessCheckRequest();
    message.otpSpoken = object.otpSpoken ?? "";
    return message;
  },
};

function createBaseTriggerLivenessCheckResponse(): TriggerLivenessCheckResponse {
  return { livenessCheckStatus: 0 };
}

export const TriggerLivenessCheckResponse = {
  encode(message: TriggerLivenessCheckResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.livenessCheckStatus !== 0) {
      writer.uint32(8).int32(message.livenessCheckStatus);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TriggerLivenessCheckResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriggerLivenessCheckResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.livenessCheckStatus = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TriggerLivenessCheckResponse {
    return {
      livenessCheckStatus: isSet(object.livenessCheckStatus)
        ? livenessCheckStatusFromJSON(object.livenessCheckStatus)
        : 0,
    };
  },

  toJSON(message: TriggerLivenessCheckResponse): unknown {
    const obj: any = {};
    if (message.livenessCheckStatus !== 0) {
      obj.livenessCheckStatus = livenessCheckStatusToJSON(message.livenessCheckStatus);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TriggerLivenessCheckResponse>, I>>(base?: I): TriggerLivenessCheckResponse {
    return TriggerLivenessCheckResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TriggerLivenessCheckResponse>, I>>(object: I): TriggerLivenessCheckResponse {
    const message = createBaseTriggerLivenessCheckResponse();
    message.livenessCheckStatus = object.livenessCheckStatus ?? 0;
    return message;
  },
};

function createBaseGetBiometricConsentScreenResponse(): GetBiometricConsentScreenResponse {
  return {
    topImage: undefined,
    header: undefined,
    topText: undefined,
    lockIcon: undefined,
    paragraphText: undefined,
    primaryButton: undefined,
    errorCode: 0,
  };
}

export const GetBiometricConsentScreenResponse = {
  encode(message: GetBiometricConsentScreenResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.topImage !== undefined) {
      Image.encode(message.topImage, writer.uint32(10).fork()).ldelim();
    }
    if (message.header !== undefined) {
      Text.encode(message.header, writer.uint32(18).fork()).ldelim();
    }
    if (message.topText !== undefined) {
      Text.encode(message.topText, writer.uint32(26).fork()).ldelim();
    }
    if (message.lockIcon !== undefined) {
      Image.encode(message.lockIcon, writer.uint32(34).fork()).ldelim();
    }
    if (message.paragraphText !== undefined) {
      Text.encode(message.paragraphText, writer.uint32(42).fork()).ldelim();
    }
    if (message.primaryButton !== undefined) {
      Button.encode(message.primaryButton, writer.uint32(50).fork()).ldelim();
    }
    if (message.errorCode !== 0) {
      writer.uint32(56).int32(message.errorCode);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetBiometricConsentScreenResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBiometricConsentScreenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.topImage = Image.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.header = Text.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.topText = Text.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.lockIcon = Image.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.paragraphText = Text.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.primaryButton = Button.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.errorCode = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBiometricConsentScreenResponse {
    return {
      topImage: isSet(object.topImage) ? Image.fromJSON(object.topImage) : undefined,
      header: isSet(object.header) ? Text.fromJSON(object.header) : undefined,
      topText: isSet(object.topText) ? Text.fromJSON(object.topText) : undefined,
      lockIcon: isSet(object.lockIcon) ? Image.fromJSON(object.lockIcon) : undefined,
      paragraphText: isSet(object.paragraphText) ? Text.fromJSON(object.paragraphText) : undefined,
      primaryButton: isSet(object.primaryButton) ? Button.fromJSON(object.primaryButton) : undefined,
      errorCode: isSet(object.errorCode) ? errorTypeFromJSON(object.errorCode) : 0,
    };
  },

  toJSON(message: GetBiometricConsentScreenResponse): unknown {
    const obj: any = {};
    if (message.topImage !== undefined) {
      obj.topImage = Image.toJSON(message.topImage);
    }
    if (message.header !== undefined) {
      obj.header = Text.toJSON(message.header);
    }
    if (message.topText !== undefined) {
      obj.topText = Text.toJSON(message.topText);
    }
    if (message.lockIcon !== undefined) {
      obj.lockIcon = Image.toJSON(message.lockIcon);
    }
    if (message.paragraphText !== undefined) {
      obj.paragraphText = Text.toJSON(message.paragraphText);
    }
    if (message.primaryButton !== undefined) {
      obj.primaryButton = Button.toJSON(message.primaryButton);
    }
    if (message.errorCode !== 0) {
      obj.errorCode = errorTypeToJSON(message.errorCode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBiometricConsentScreenResponse>, I>>(
    base?: I,
  ): GetBiometricConsentScreenResponse {
    return GetBiometricConsentScreenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBiometricConsentScreenResponse>, I>>(
    object: I,
  ): GetBiometricConsentScreenResponse {
    const message = createBaseGetBiometricConsentScreenResponse();
    message.topImage = (object.topImage !== undefined && object.topImage !== null)
      ? Image.fromPartial(object.topImage)
      : undefined;
    message.header = (object.header !== undefined && object.header !== null)
      ? Text.fromPartial(object.header)
      : undefined;
    message.topText = (object.topText !== undefined && object.topText !== null)
      ? Text.fromPartial(object.topText)
      : undefined;
    message.lockIcon = (object.lockIcon !== undefined && object.lockIcon !== null)
      ? Image.fromPartial(object.lockIcon)
      : undefined;
    message.paragraphText = (object.paragraphText !== undefined && object.paragraphText !== null)
      ? Text.fromPartial(object.paragraphText)
      : undefined;
    message.primaryButton = (object.primaryButton !== undefined && object.primaryButton !== null)
      ? Button.fromPartial(object.primaryButton)
      : undefined;
    message.errorCode = object.errorCode ?? 0;
    return message;
  },
};

function createBaseGetOtherConsentsScreenResponse(): GetOtherConsentsScreenResponse {
  return {
    permissionImage: undefined,
    permissionHeader: undefined,
    permissionParagraph: undefined,
    notificationsConsent: undefined,
    locationConsent: undefined,
    nextButton: undefined,
    agreementCheckbox: undefined,
    alertModal: undefined,
    error: 0,
  };
}

export const GetOtherConsentsScreenResponse = {
  encode(message: GetOtherConsentsScreenResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.permissionImage !== undefined) {
      Image.encode(message.permissionImage, writer.uint32(10).fork()).ldelim();
    }
    if (message.permissionHeader !== undefined) {
      Text.encode(message.permissionHeader, writer.uint32(18).fork()).ldelim();
    }
    if (message.permissionParagraph !== undefined) {
      Text.encode(message.permissionParagraph, writer.uint32(26).fork()).ldelim();
    }
    if (message.notificationsConsent !== undefined) {
      NotificationsConsent.encode(message.notificationsConsent, writer.uint32(34).fork()).ldelim();
    }
    if (message.locationConsent !== undefined) {
      LocationConsent.encode(message.locationConsent, writer.uint32(42).fork()).ldelim();
    }
    if (message.nextButton !== undefined) {
      Button.encode(message.nextButton, writer.uint32(50).fork()).ldelim();
    }
    if (message.agreementCheckbox !== undefined) {
      CheckBox.encode(message.agreementCheckbox, writer.uint32(58).fork()).ldelim();
    }
    if (message.alertModal !== undefined) {
      Modal.encode(message.alertModal, writer.uint32(66).fork()).ldelim();
    }
    if (message.error !== 0) {
      writer.uint32(72).int32(message.error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOtherConsentsScreenResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOtherConsentsScreenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permissionImage = Image.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.permissionHeader = Text.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.permissionParagraph = Text.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.notificationsConsent = NotificationsConsent.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.locationConsent = LocationConsent.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.nextButton = Button.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.agreementCheckbox = CheckBox.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.alertModal = Modal.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.error = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOtherConsentsScreenResponse {
    return {
      permissionImage: isSet(object.permissionImage) ? Image.fromJSON(object.permissionImage) : undefined,
      permissionHeader: isSet(object.permissionHeader) ? Text.fromJSON(object.permissionHeader) : undefined,
      permissionParagraph: isSet(object.permissionParagraph) ? Text.fromJSON(object.permissionParagraph) : undefined,
      notificationsConsent: isSet(object.notificationsConsent)
        ? NotificationsConsent.fromJSON(object.notificationsConsent)
        : undefined,
      locationConsent: isSet(object.locationConsent) ? LocationConsent.fromJSON(object.locationConsent) : undefined,
      nextButton: isSet(object.nextButton) ? Button.fromJSON(object.nextButton) : undefined,
      agreementCheckbox: isSet(object.agreementCheckbox) ? CheckBox.fromJSON(object.agreementCheckbox) : undefined,
      alertModal: isSet(object.alertModal) ? Modal.fromJSON(object.alertModal) : undefined,
      error: isSet(object.error) ? errorTypeFromJSON(object.error) : 0,
    };
  },

  toJSON(message: GetOtherConsentsScreenResponse): unknown {
    const obj: any = {};
    if (message.permissionImage !== undefined) {
      obj.permissionImage = Image.toJSON(message.permissionImage);
    }
    if (message.permissionHeader !== undefined) {
      obj.permissionHeader = Text.toJSON(message.permissionHeader);
    }
    if (message.permissionParagraph !== undefined) {
      obj.permissionParagraph = Text.toJSON(message.permissionParagraph);
    }
    if (message.notificationsConsent !== undefined) {
      obj.notificationsConsent = NotificationsConsent.toJSON(message.notificationsConsent);
    }
    if (message.locationConsent !== undefined) {
      obj.locationConsent = LocationConsent.toJSON(message.locationConsent);
    }
    if (message.nextButton !== undefined) {
      obj.nextButton = Button.toJSON(message.nextButton);
    }
    if (message.agreementCheckbox !== undefined) {
      obj.agreementCheckbox = CheckBox.toJSON(message.agreementCheckbox);
    }
    if (message.alertModal !== undefined) {
      obj.alertModal = Modal.toJSON(message.alertModal);
    }
    if (message.error !== 0) {
      obj.error = errorTypeToJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOtherConsentsScreenResponse>, I>>(base?: I): GetOtherConsentsScreenResponse {
    return GetOtherConsentsScreenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOtherConsentsScreenResponse>, I>>(
    object: I,
  ): GetOtherConsentsScreenResponse {
    const message = createBaseGetOtherConsentsScreenResponse();
    message.permissionImage = (object.permissionImage !== undefined && object.permissionImage !== null)
      ? Image.fromPartial(object.permissionImage)
      : undefined;
    message.permissionHeader = (object.permissionHeader !== undefined && object.permissionHeader !== null)
      ? Text.fromPartial(object.permissionHeader)
      : undefined;
    message.permissionParagraph = (object.permissionParagraph !== undefined && object.permissionParagraph !== null)
      ? Text.fromPartial(object.permissionParagraph)
      : undefined;
    message.notificationsConsent = (object.notificationsConsent !== undefined && object.notificationsConsent !== null)
      ? NotificationsConsent.fromPartial(object.notificationsConsent)
      : undefined;
    message.locationConsent = (object.locationConsent !== undefined && object.locationConsent !== null)
      ? LocationConsent.fromPartial(object.locationConsent)
      : undefined;
    message.nextButton = (object.nextButton !== undefined && object.nextButton !== null)
      ? Button.fromPartial(object.nextButton)
      : undefined;
    message.agreementCheckbox = (object.agreementCheckbox !== undefined && object.agreementCheckbox !== null)
      ? CheckBox.fromPartial(object.agreementCheckbox)
      : undefined;
    message.alertModal = (object.alertModal !== undefined && object.alertModal !== null)
      ? Modal.fromPartial(object.alertModal)
      : undefined;
    message.error = object.error ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
