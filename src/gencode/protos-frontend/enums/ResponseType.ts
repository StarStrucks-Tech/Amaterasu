// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.27.0
// source: protos-frontend/enums/ResponseType.proto

/* eslint-disable */

export const protobufPackage = "enums";

/** enum that identifies the state for the phone number verification response type */
export enum VerificationResponseType {
  VERIFICATION_RESPONSE_UNIDENTIFIED = 0,
  VERIFICATION_RESPONSE_OTP_SENT = 1,
  VERIFICATION_RESPONSE_INVALID_PARAMETERS = 2,
  VERIFICATION_RESPONSE_SERVER_FAILURE = 3,
  UNRECOGNIZED = -1,
}

export function verificationResponseTypeFromJSON(object: any): VerificationResponseType {
  switch (object) {
    case 0:
    case "VERIFICATION_RESPONSE_UNIDENTIFIED":
      return VerificationResponseType.VERIFICATION_RESPONSE_UNIDENTIFIED;
    case 1:
    case "VERIFICATION_RESPONSE_OTP_SENT":
      return VerificationResponseType.VERIFICATION_RESPONSE_OTP_SENT;
    case 2:
    case "VERIFICATION_RESPONSE_INVALID_PARAMETERS":
      return VerificationResponseType.VERIFICATION_RESPONSE_INVALID_PARAMETERS;
    case 3:
    case "VERIFICATION_RESPONSE_SERVER_FAILURE":
      return VerificationResponseType.VERIFICATION_RESPONSE_SERVER_FAILURE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return VerificationResponseType.UNRECOGNIZED;
  }
}

export function verificationResponseTypeToJSON(object: VerificationResponseType): string {
  switch (object) {
    case VerificationResponseType.VERIFICATION_RESPONSE_UNIDENTIFIED:
      return "VERIFICATION_RESPONSE_UNIDENTIFIED";
    case VerificationResponseType.VERIFICATION_RESPONSE_OTP_SENT:
      return "VERIFICATION_RESPONSE_OTP_SENT";
    case VerificationResponseType.VERIFICATION_RESPONSE_INVALID_PARAMETERS:
      return "VERIFICATION_RESPONSE_INVALID_PARAMETERS";
    case VerificationResponseType.VERIFICATION_RESPONSE_SERVER_FAILURE:
      return "VERIFICATION_RESPONSE_SERVER_FAILURE";
    case VerificationResponseType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum LivenessCheckStatus {
  LIVENESS_CHECK_STATUS_UNIDENTIFIED = 0,
  LIVENESS_CHECK_STATUS_OTP_MATCHED = 1,
  LIVENESS_CHECK_STATUS_INVALID_OTP = 2,
  LIVENESS_CHECK_STATUS_SERVER_FAILURE = 3,
  UNRECOGNIZED = -1,
}

export function livenessCheckStatusFromJSON(object: any): LivenessCheckStatus {
  switch (object) {
    case 0:
    case "LIVENESS_CHECK_STATUS_UNIDENTIFIED":
      return LivenessCheckStatus.LIVENESS_CHECK_STATUS_UNIDENTIFIED;
    case 1:
    case "LIVENESS_CHECK_STATUS_OTP_MATCHED":
      return LivenessCheckStatus.LIVENESS_CHECK_STATUS_OTP_MATCHED;
    case 2:
    case "LIVENESS_CHECK_STATUS_INVALID_OTP":
      return LivenessCheckStatus.LIVENESS_CHECK_STATUS_INVALID_OTP;
    case 3:
    case "LIVENESS_CHECK_STATUS_SERVER_FAILURE":
      return LivenessCheckStatus.LIVENESS_CHECK_STATUS_SERVER_FAILURE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LivenessCheckStatus.UNRECOGNIZED;
  }
}

export function livenessCheckStatusToJSON(object: LivenessCheckStatus): string {
  switch (object) {
    case LivenessCheckStatus.LIVENESS_CHECK_STATUS_UNIDENTIFIED:
      return "LIVENESS_CHECK_STATUS_UNIDENTIFIED";
    case LivenessCheckStatus.LIVENESS_CHECK_STATUS_OTP_MATCHED:
      return "LIVENESS_CHECK_STATUS_OTP_MATCHED";
    case LivenessCheckStatus.LIVENESS_CHECK_STATUS_INVALID_OTP:
      return "LIVENESS_CHECK_STATUS_INVALID_OTP";
    case LivenessCheckStatus.LIVENESS_CHECK_STATUS_SERVER_FAILURE:
      return "LIVENESS_CHECK_STATUS_SERVER_FAILURE";
    case LivenessCheckStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ErrorType {
  /** UNKNOWN_ERROR - Default value indicating an unknown error. */
  UNKNOWN_ERROR = 0,
  /** INVALID_REQUEST - Error code indicating that the request is invalid. */
  INVALID_REQUEST = 1,
  /** PERMISSION_DENIED - Error code indicating that permission is denied for the operation. */
  PERMISSION_DENIED = 2,
  UNRECOGNIZED = -1,
}

export function errorTypeFromJSON(object: any): ErrorType {
  switch (object) {
    case 0:
    case "UNKNOWN_ERROR":
      return ErrorType.UNKNOWN_ERROR;
    case 1:
    case "INVALID_REQUEST":
      return ErrorType.INVALID_REQUEST;
    case 2:
    case "PERMISSION_DENIED":
      return ErrorType.PERMISSION_DENIED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ErrorType.UNRECOGNIZED;
  }
}

export function errorTypeToJSON(object: ErrorType): string {
  switch (object) {
    case ErrorType.UNKNOWN_ERROR:
      return "UNKNOWN_ERROR";
    case ErrorType.INVALID_REQUEST:
      return "INVALID_REQUEST";
    case ErrorType.PERMISSION_DENIED:
      return "PERMISSION_DENIED";
    case ErrorType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
