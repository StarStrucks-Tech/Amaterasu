// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.27.1
// source: protos-frontend/frontend/FrontendService.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Button } from "../UI/Button";
import {
  VerificationResponseType,
  verificationResponseTypeFromJSON,
  verificationResponseTypeToJSON,
} from "../enums/ResponseType";

export const protobufPackage = "frontend";

/** Define the request message */
export interface GetPhoneVerificationScreenRequest {
}

export interface GetPhoneVerificationScreenResponse {
  title: string;
  subTitle: string;
  phoneNumberHeading: string;
  inputNumber: string;
  phoneNumberBreifing: string;
  img1Url: string;
  primaryButton: Button | undefined;
}

export interface TriggerPhoneVerificationRequest {
  phoneNumber: string;
}

export interface TriggerPhoneVerificationResponse {
  responseType: VerificationResponseType;
}

export interface GetEmailVerificationScreenRequest {
}

export interface GetEmailVerificationScreenResponse {
  responseType: VerificationResponseType;
  title: string;
  subTitle: string;
  primaryButton: Button | undefined;
  imgUrl: string;
}

export interface TriggerEmailVerificationRequest {
  emailId: string;
  userName: string;
}

export interface TriggerEmailVerificationResponse {
  responseType: VerificationResponseType;
}

function createBaseGetPhoneVerificationScreenRequest(): GetPhoneVerificationScreenRequest {
  return {};
}

export const GetPhoneVerificationScreenRequest = {
  encode(_: GetPhoneVerificationScreenRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPhoneVerificationScreenRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPhoneVerificationScreenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetPhoneVerificationScreenRequest {
    return {};
  },

  toJSON(_: GetPhoneVerificationScreenRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPhoneVerificationScreenRequest>, I>>(
    base?: I,
  ): GetPhoneVerificationScreenRequest {
    return GetPhoneVerificationScreenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPhoneVerificationScreenRequest>, I>>(
    _: I,
  ): GetPhoneVerificationScreenRequest {
    const message = createBaseGetPhoneVerificationScreenRequest();
    return message;
  },
};

function createBaseGetPhoneVerificationScreenResponse(): GetPhoneVerificationScreenResponse {
  return {
    title: "",
    subTitle: "",
    phoneNumberHeading: "",
    inputNumber: "",
    phoneNumberBreifing: "",
    img1Url: "",
    primaryButton: undefined,
  };
}

export const GetPhoneVerificationScreenResponse = {
  encode(message: GetPhoneVerificationScreenResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.subTitle !== "") {
      writer.uint32(18).string(message.subTitle);
    }
    if (message.phoneNumberHeading !== "") {
      writer.uint32(26).string(message.phoneNumberHeading);
    }
    if (message.inputNumber !== "") {
      writer.uint32(34).string(message.inputNumber);
    }
    if (message.phoneNumberBreifing !== "") {
      writer.uint32(42).string(message.phoneNumberBreifing);
    }
    if (message.img1Url !== "") {
      writer.uint32(50).string(message.img1Url);
    }
    if (message.primaryButton !== undefined) {
      Button.encode(message.primaryButton, writer.uint32(66).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPhoneVerificationScreenResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPhoneVerificationScreenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.subTitle = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.phoneNumberHeading = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.inputNumber = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.phoneNumberBreifing = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.img1Url = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.primaryButton = Button.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPhoneVerificationScreenResponse {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      subTitle: isSet(object.subTitle) ? globalThis.String(object.subTitle) : "",
      phoneNumberHeading: isSet(object.phoneNumberHeading) ? globalThis.String(object.phoneNumberHeading) : "",
      inputNumber: isSet(object.inputNumber) ? globalThis.String(object.inputNumber) : "",
      phoneNumberBreifing: isSet(object.phoneNumberBreifing) ? globalThis.String(object.phoneNumberBreifing) : "",
      img1Url: isSet(object.img1Url) ? globalThis.String(object.img1Url) : "",
      primaryButton: isSet(object.primaryButton) ? Button.fromJSON(object.primaryButton) : undefined,
    };
  },

  toJSON(message: GetPhoneVerificationScreenResponse): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.subTitle !== "") {
      obj.subTitle = message.subTitle;
    }
    if (message.phoneNumberHeading !== "") {
      obj.phoneNumberHeading = message.phoneNumberHeading;
    }
    if (message.inputNumber !== "") {
      obj.inputNumber = message.inputNumber;
    }
    if (message.phoneNumberBreifing !== "") {
      obj.phoneNumberBreifing = message.phoneNumberBreifing;
    }
    if (message.img1Url !== "") {
      obj.img1Url = message.img1Url;
    }
    if (message.primaryButton !== undefined) {
      obj.primaryButton = Button.toJSON(message.primaryButton);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPhoneVerificationScreenResponse>, I>>(
    base?: I,
  ): GetPhoneVerificationScreenResponse {
    return GetPhoneVerificationScreenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPhoneVerificationScreenResponse>, I>>(
    object: I,
  ): GetPhoneVerificationScreenResponse {
    const message = createBaseGetPhoneVerificationScreenResponse();
    message.title = object.title ?? "";
    message.subTitle = object.subTitle ?? "";
    message.phoneNumberHeading = object.phoneNumberHeading ?? "";
    message.inputNumber = object.inputNumber ?? "";
    message.phoneNumberBreifing = object.phoneNumberBreifing ?? "";
    message.img1Url = object.img1Url ?? "";
    message.primaryButton = (object.primaryButton !== undefined && object.primaryButton !== null)
      ? Button.fromPartial(object.primaryButton)
      : undefined;
    return message;
  },
};

function createBaseTriggerPhoneVerificationRequest(): TriggerPhoneVerificationRequest {
  return { phoneNumber: "" };
}

export const TriggerPhoneVerificationRequest = {
  encode(message: TriggerPhoneVerificationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.phoneNumber !== "") {
      writer.uint32(10).string(message.phoneNumber);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TriggerPhoneVerificationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriggerPhoneVerificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TriggerPhoneVerificationRequest {
    return { phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : "" };
  },

  toJSON(message: TriggerPhoneVerificationRequest): unknown {
    const obj: any = {};
    if (message.phoneNumber !== "") {
      obj.phoneNumber = message.phoneNumber;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TriggerPhoneVerificationRequest>, I>>(base?: I): TriggerPhoneVerificationRequest {
    return TriggerPhoneVerificationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TriggerPhoneVerificationRequest>, I>>(
    object: I,
  ): TriggerPhoneVerificationRequest {
    const message = createBaseTriggerPhoneVerificationRequest();
    message.phoneNumber = object.phoneNumber ?? "";
    return message;
  },
};

function createBaseTriggerPhoneVerificationResponse(): TriggerPhoneVerificationResponse {
  return { responseType: 0 };
}

export const TriggerPhoneVerificationResponse = {
  encode(message: TriggerPhoneVerificationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.responseType !== 0) {
      writer.uint32(8).int32(message.responseType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TriggerPhoneVerificationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriggerPhoneVerificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.responseType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TriggerPhoneVerificationResponse {
    return { responseType: isSet(object.responseType) ? verificationResponseTypeFromJSON(object.responseType) : 0 };
  },

  toJSON(message: TriggerPhoneVerificationResponse): unknown {
    const obj: any = {};
    if (message.responseType !== 0) {
      obj.responseType = verificationResponseTypeToJSON(message.responseType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TriggerPhoneVerificationResponse>, I>>(
    base?: I,
  ): TriggerPhoneVerificationResponse {
    return TriggerPhoneVerificationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TriggerPhoneVerificationResponse>, I>>(
    object: I,
  ): TriggerPhoneVerificationResponse {
    const message = createBaseTriggerPhoneVerificationResponse();
    message.responseType = object.responseType ?? 0;
    return message;
  },
};

function createBaseGetEmailVerificationScreenRequest(): GetEmailVerificationScreenRequest {
  return {};
}

export const GetEmailVerificationScreenRequest = {
  encode(_: GetEmailVerificationScreenRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetEmailVerificationScreenRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEmailVerificationScreenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetEmailVerificationScreenRequest {
    return {};
  },

  toJSON(_: GetEmailVerificationScreenRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetEmailVerificationScreenRequest>, I>>(
    base?: I,
  ): GetEmailVerificationScreenRequest {
    return GetEmailVerificationScreenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetEmailVerificationScreenRequest>, I>>(
    _: I,
  ): GetEmailVerificationScreenRequest {
    const message = createBaseGetEmailVerificationScreenRequest();
    return message;
  },
};

function createBaseGetEmailVerificationScreenResponse(): GetEmailVerificationScreenResponse {
  return { responseType: 0, title: "", subTitle: "", primaryButton: undefined, imgUrl: "" };
}

export const GetEmailVerificationScreenResponse = {
  encode(message: GetEmailVerificationScreenResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.responseType !== 0) {
      writer.uint32(8).int32(message.responseType);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.subTitle !== "") {
      writer.uint32(26).string(message.subTitle);
    }
    if (message.primaryButton !== undefined) {
      Button.encode(message.primaryButton, writer.uint32(34).fork()).ldelim();
    }
    if (message.imgUrl !== "") {
      writer.uint32(42).string(message.imgUrl);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetEmailVerificationScreenResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEmailVerificationScreenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.responseType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.subTitle = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.primaryButton = Button.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.imgUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEmailVerificationScreenResponse {
    return {
      responseType: isSet(object.responseType) ? verificationResponseTypeFromJSON(object.responseType) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      subTitle: isSet(object.subTitle) ? globalThis.String(object.subTitle) : "",
      primaryButton: isSet(object.primaryButton) ? Button.fromJSON(object.primaryButton) : undefined,
      imgUrl: isSet(object.imgUrl) ? globalThis.String(object.imgUrl) : "",
    };
  },

  toJSON(message: GetEmailVerificationScreenResponse): unknown {
    const obj: any = {};
    if (message.responseType !== 0) {
      obj.responseType = verificationResponseTypeToJSON(message.responseType);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.subTitle !== "") {
      obj.subTitle = message.subTitle;
    }
    if (message.primaryButton !== undefined) {
      obj.primaryButton = Button.toJSON(message.primaryButton);
    }
    if (message.imgUrl !== "") {
      obj.imgUrl = message.imgUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetEmailVerificationScreenResponse>, I>>(
    base?: I,
  ): GetEmailVerificationScreenResponse {
    return GetEmailVerificationScreenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetEmailVerificationScreenResponse>, I>>(
    object: I,
  ): GetEmailVerificationScreenResponse {
    const message = createBaseGetEmailVerificationScreenResponse();
    message.responseType = object.responseType ?? 0;
    message.title = object.title ?? "";
    message.subTitle = object.subTitle ?? "";
    message.primaryButton = (object.primaryButton !== undefined && object.primaryButton !== null)
      ? Button.fromPartial(object.primaryButton)
      : undefined;
    message.imgUrl = object.imgUrl ?? "";
    return message;
  },
};

function createBaseTriggerEmailVerificationRequest(): TriggerEmailVerificationRequest {
  return { emailId: "", userName: "" };
}

export const TriggerEmailVerificationRequest = {
  encode(message: TriggerEmailVerificationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.emailId !== "") {
      writer.uint32(10).string(message.emailId);
    }
    if (message.userName !== "") {
      writer.uint32(18).string(message.userName);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TriggerEmailVerificationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriggerEmailVerificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.emailId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TriggerEmailVerificationRequest {
    return {
      emailId: isSet(object.emailId) ? globalThis.String(object.emailId) : "",
      userName: isSet(object.userName) ? globalThis.String(object.userName) : "",
    };
  },

  toJSON(message: TriggerEmailVerificationRequest): unknown {
    const obj: any = {};
    if (message.emailId !== "") {
      obj.emailId = message.emailId;
    }
    if (message.userName !== "") {
      obj.userName = message.userName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TriggerEmailVerificationRequest>, I>>(base?: I): TriggerEmailVerificationRequest {
    return TriggerEmailVerificationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TriggerEmailVerificationRequest>, I>>(
    object: I,
  ): TriggerEmailVerificationRequest {
    const message = createBaseTriggerEmailVerificationRequest();
    message.emailId = object.emailId ?? "";
    message.userName = object.userName ?? "";
    return message;
  },
};

function createBaseTriggerEmailVerificationResponse(): TriggerEmailVerificationResponse {
  return { responseType: 0 };
}

export const TriggerEmailVerificationResponse = {
  encode(message: TriggerEmailVerificationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.responseType !== 0) {
      writer.uint32(8).int32(message.responseType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TriggerEmailVerificationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriggerEmailVerificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.responseType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TriggerEmailVerificationResponse {
    return { responseType: isSet(object.responseType) ? verificationResponseTypeFromJSON(object.responseType) : 0 };
  },

  toJSON(message: TriggerEmailVerificationResponse): unknown {
    const obj: any = {};
    if (message.responseType !== 0) {
      obj.responseType = verificationResponseTypeToJSON(message.responseType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TriggerEmailVerificationResponse>, I>>(
    base?: I,
  ): TriggerEmailVerificationResponse {
    return TriggerEmailVerificationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TriggerEmailVerificationResponse>, I>>(
    object: I,
  ): TriggerEmailVerificationResponse {
    const message = createBaseTriggerEmailVerificationResponse();
    message.responseType = object.responseType ?? 0;
    return message;
  },
};

/** Define the service */
export interface FrontendService {
  /** RPC to get the phone verification */
  GetPhoneVerificationScreen(request: GetPhoneVerificationScreenRequest): Promise<GetPhoneVerificationScreenResponse>;
  TriggerPhoneVerification(request: TriggerPhoneVerificationRequest): Promise<TriggerPhoneVerificationResponse>;
  GetEmailVerificationScreen(request: GetEmailVerificationScreenRequest): Promise<GetEmailVerificationScreenResponse>;
  TriggerEmailVerification(request: TriggerEmailVerificationRequest): Promise<TriggerEmailVerificationResponse>;
}

export const FrontendServiceServiceName = "frontend.FrontendService";
export class FrontendServiceClientImpl implements FrontendService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || FrontendServiceServiceName;
    this.rpc = rpc;
    this.GetPhoneVerificationScreen = this.GetPhoneVerificationScreen.bind(this);
    this.TriggerPhoneVerification = this.TriggerPhoneVerification.bind(this);
    this.GetEmailVerificationScreen = this.GetEmailVerificationScreen.bind(this);
    this.TriggerEmailVerification = this.TriggerEmailVerification.bind(this);
  }
  GetPhoneVerificationScreen(request: GetPhoneVerificationScreenRequest): Promise<GetPhoneVerificationScreenResponse> {
    const data = GetPhoneVerificationScreenRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetPhoneVerificationScreen", data);
    return promise.then((data) => GetPhoneVerificationScreenResponse.decode(_m0.Reader.create(data)));
  }

  TriggerPhoneVerification(request: TriggerPhoneVerificationRequest): Promise<TriggerPhoneVerificationResponse> {
    const data = TriggerPhoneVerificationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TriggerPhoneVerification", data);
    return promise.then((data) => TriggerPhoneVerificationResponse.decode(_m0.Reader.create(data)));
  }

  GetEmailVerificationScreen(request: GetEmailVerificationScreenRequest): Promise<GetEmailVerificationScreenResponse> {
    const data = GetEmailVerificationScreenRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetEmailVerificationScreen", data);
    return promise.then((data) => GetEmailVerificationScreenResponse.decode(_m0.Reader.create(data)));
  }

  TriggerEmailVerification(request: TriggerEmailVerificationRequest): Promise<TriggerEmailVerificationResponse> {
    const data = TriggerEmailVerificationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TriggerEmailVerification", data);
    return promise.then((data) => TriggerEmailVerificationResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
