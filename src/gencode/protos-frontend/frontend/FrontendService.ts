// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.27.0
// source: protos-frontend/frontend/FrontendService.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { EmptyRequest } from "../generic/GenericMessages";
import {
  GetBiometricConsentScreenResponse,
  GetEmailVerificationScreenResponse,
  GetLivenessCheckScreenResponse,
  GetOtherConsentsScreenResponse,
  GetPanVerificationScreenResponse,
  GetPhoneOTPVerificationScreenResponse,
  GetPhoneVerificationScreenResponse,
  TriggerEmailVerificationRequest,
  TriggerEmailVerificationResponse,
  TriggerLivenessCheckRequest,
  TriggerLivenessCheckResponse,
  TriggerPanVerificationRequest,
  TriggerPanVerificationResponse,
  TriggerPhoneOTPVerificationRequest,
  TriggerPhoneOTPVerificationResponse,
  TriggerPhoneVerificationResponse,
} from "../onboarding/rpc";

export const protobufPackage = "frontend";

/** Define the service */
export interface FrontendService {
  /** RPC to get the phone verification */
  GetPhoneVerificationScreen(request: EmptyRequest): Promise<GetPhoneVerificationScreenResponse>;
  TriggerPhoneVerification(request: TriggerPhoneOTPVerificationRequest): Promise<TriggerPhoneVerificationResponse>;
  GetPhoneOTPVerificationScreen(request: EmptyRequest): Promise<GetPhoneOTPVerificationScreenResponse>;
  TriggerPhoneOTPVerification(
    request: TriggerPhoneOTPVerificationRequest,
  ): Promise<TriggerPhoneOTPVerificationResponse>;
  GetEmailVerificationScreen(request: EmptyRequest): Promise<GetEmailVerificationScreenResponse>;
  TriggerEmailVerification(request: TriggerEmailVerificationRequest): Promise<TriggerEmailVerificationResponse>;
  GetPanVerificationScreen(request: EmptyRequest): Promise<GetPanVerificationScreenResponse>;
  TriggerPanVerification(request: TriggerPanVerificationRequest): Promise<TriggerPanVerificationResponse>;
  GetLivenessCheckScreen(request: EmptyRequest): Promise<GetLivenessCheckScreenResponse>;
  TriggerLivenessCheck(request: TriggerLivenessCheckRequest): Promise<TriggerLivenessCheckResponse>;
  /** RPC method to get biometric consent */
  GetBiometricConsentScreen(request: EmptyRequest): Promise<GetBiometricConsentScreenResponse>;
  GetOtherConsentsScreen(request: EmptyRequest): Promise<GetOtherConsentsScreenResponse>;
}

export const FrontendServiceServiceName = "frontend.FrontendService";
export class FrontendServiceClientImpl implements FrontendService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || FrontendServiceServiceName;
    this.rpc = rpc;
    this.GetPhoneVerificationScreen = this.GetPhoneVerificationScreen.bind(this);
    this.TriggerPhoneVerification = this.TriggerPhoneVerification.bind(this);
    this.GetPhoneOTPVerificationScreen = this.GetPhoneOTPVerificationScreen.bind(this);
    this.TriggerPhoneOTPVerification = this.TriggerPhoneOTPVerification.bind(this);
    this.GetEmailVerificationScreen = this.GetEmailVerificationScreen.bind(this);
    this.TriggerEmailVerification = this.TriggerEmailVerification.bind(this);
    this.GetPanVerificationScreen = this.GetPanVerificationScreen.bind(this);
    this.TriggerPanVerification = this.TriggerPanVerification.bind(this);
    this.GetLivenessCheckScreen = this.GetLivenessCheckScreen.bind(this);
    this.TriggerLivenessCheck = this.TriggerLivenessCheck.bind(this);
    this.GetBiometricConsentScreen = this.GetBiometricConsentScreen.bind(this);
    this.GetOtherConsentsScreen = this.GetOtherConsentsScreen.bind(this);
  }
  GetPhoneVerificationScreen(request: EmptyRequest): Promise<GetPhoneVerificationScreenResponse> {
    const data = EmptyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetPhoneVerificationScreen", data);
    return promise.then((data) => GetPhoneVerificationScreenResponse.decode(_m0.Reader.create(data)));
  }

  TriggerPhoneVerification(request: TriggerPhoneOTPVerificationRequest): Promise<TriggerPhoneVerificationResponse> {
    const data = TriggerPhoneOTPVerificationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TriggerPhoneVerification", data);
    return promise.then((data) => TriggerPhoneVerificationResponse.decode(_m0.Reader.create(data)));
  }

  GetPhoneOTPVerificationScreen(request: EmptyRequest): Promise<GetPhoneOTPVerificationScreenResponse> {
    const data = EmptyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetPhoneOTPVerificationScreen", data);
    return promise.then((data) => GetPhoneOTPVerificationScreenResponse.decode(_m0.Reader.create(data)));
  }

  TriggerPhoneOTPVerification(
    request: TriggerPhoneOTPVerificationRequest,
  ): Promise<TriggerPhoneOTPVerificationResponse> {
    const data = TriggerPhoneOTPVerificationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TriggerPhoneOTPVerification", data);
    return promise.then((data) => TriggerPhoneOTPVerificationResponse.decode(_m0.Reader.create(data)));
  }

  GetEmailVerificationScreen(request: EmptyRequest): Promise<GetEmailVerificationScreenResponse> {
    const data = EmptyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetEmailVerificationScreen", data);
    return promise.then((data) => GetEmailVerificationScreenResponse.decode(_m0.Reader.create(data)));
  }

  TriggerEmailVerification(request: TriggerEmailVerificationRequest): Promise<TriggerEmailVerificationResponse> {
    const data = TriggerEmailVerificationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TriggerEmailVerification", data);
    return promise.then((data) => TriggerEmailVerificationResponse.decode(_m0.Reader.create(data)));
  }

  GetPanVerificationScreen(request: EmptyRequest): Promise<GetPanVerificationScreenResponse> {
    const data = EmptyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetPanVerificationScreen", data);
    return promise.then((data) => GetPanVerificationScreenResponse.decode(_m0.Reader.create(data)));
  }

  TriggerPanVerification(request: TriggerPanVerificationRequest): Promise<TriggerPanVerificationResponse> {
    const data = TriggerPanVerificationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TriggerPanVerification", data);
    return promise.then((data) => TriggerPanVerificationResponse.decode(_m0.Reader.create(data)));
  }

  GetLivenessCheckScreen(request: EmptyRequest): Promise<GetLivenessCheckScreenResponse> {
    const data = EmptyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetLivenessCheckScreen", data);
    return promise.then((data) => GetLivenessCheckScreenResponse.decode(_m0.Reader.create(data)));
  }

  TriggerLivenessCheck(request: TriggerLivenessCheckRequest): Promise<TriggerLivenessCheckResponse> {
    const data = TriggerLivenessCheckRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TriggerLivenessCheck", data);
    return promise.then((data) => TriggerLivenessCheckResponse.decode(_m0.Reader.create(data)));
  }

  GetBiometricConsentScreen(request: EmptyRequest): Promise<GetBiometricConsentScreenResponse> {
    const data = EmptyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetBiometricConsentScreen", data);
    return promise.then((data) => GetBiometricConsentScreenResponse.decode(_m0.Reader.create(data)));
  }

  GetOtherConsentsScreen(request: EmptyRequest): Promise<GetOtherConsentsScreenResponse> {
    const data = EmptyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetOtherConsentsScreen", data);
    return promise.then((data) => GetOtherConsentsScreenResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
