// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "protos-frontend/UI/Modal.proto" (package "UI", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CornerRadius } from "./ServerDrivenMessages";
import { Button } from "./Button";
import { Text } from "./Text";
/**
 * *
 * Modal message
 * Represents a modal component, which includes visibility, text, button, width, height, and corner radius
 *
 * @generated from protobuf message UI.Modal
 */
export interface Modal {
    /**
     * *
     * Visibility of the modal
     * This field indicates whether the modal is visible or not
     *
     * @generated from protobuf field: bool visible = 1;
     */
    visible: boolean;
    /**
     * *
     * Text content of the modal
     * This field contains the text to be displayed in the modal
     *
     * @generated from protobuf field: UI.Text modal_text = 2;
     */
    modalText?: Text;
    /**
     * *
     * Button associated with the modal
     * This field contains the button to be displayed in the modal
     *
     * @generated from protobuf field: UI.Button modal_button = 3;
     */
    modalButton?: Button;
    /**
     * *
     * Width of the modal
     * This field specifies the width of the modal
     *
     * @generated from protobuf field: float width = 4;
     */
    width: number;
    /**
     * *
     * Height of the modal
     * This field specifies the height of the modal
     *
     * @generated from protobuf field: float height = 5;
     */
    height: number;
    /**
     * *
     * Corner radius of the modal
     * This field specifies the corner radius of the modal
     *
     * @generated from protobuf field: UI.CornerRadius modal_radius = 6;
     */
    modalRadius?: CornerRadius;
}
// @generated message type with reflection information, may provide speed optimized methods
class Modal$Type extends MessageType<Modal> {
    constructor() {
        super("UI.Modal", [
            { no: 1, name: "visible", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "modal_text", kind: "message", T: () => Text },
            { no: 3, name: "modal_button", kind: "message", T: () => Button },
            { no: 4, name: "width", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "height", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "modal_radius", kind: "message", T: () => CornerRadius }
        ]);
    }
    create(value?: PartialMessage<Modal>): Modal {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.visible = false;
        message.width = 0;
        message.height = 0;
        if (value !== undefined)
            reflectionMergePartial<Modal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Modal): Modal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool visible */ 1:
                    message.visible = reader.bool();
                    break;
                case /* UI.Text modal_text */ 2:
                    message.modalText = Text.internalBinaryRead(reader, reader.uint32(), options, message.modalText);
                    break;
                case /* UI.Button modal_button */ 3:
                    message.modalButton = Button.internalBinaryRead(reader, reader.uint32(), options, message.modalButton);
                    break;
                case /* float width */ 4:
                    message.width = reader.float();
                    break;
                case /* float height */ 5:
                    message.height = reader.float();
                    break;
                case /* UI.CornerRadius modal_radius */ 6:
                    message.modalRadius = CornerRadius.internalBinaryRead(reader, reader.uint32(), options, message.modalRadius);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Modal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool visible = 1; */
        if (message.visible !== false)
            writer.tag(1, WireType.Varint).bool(message.visible);
        /* UI.Text modal_text = 2; */
        if (message.modalText)
            Text.internalBinaryWrite(message.modalText, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* UI.Button modal_button = 3; */
        if (message.modalButton)
            Button.internalBinaryWrite(message.modalButton, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* float width = 4; */
        if (message.width !== 0)
            writer.tag(4, WireType.Bit32).float(message.width);
        /* float height = 5; */
        if (message.height !== 0)
            writer.tag(5, WireType.Bit32).float(message.height);
        /* UI.CornerRadius modal_radius = 6; */
        if (message.modalRadius)
            CornerRadius.internalBinaryWrite(message.modalRadius, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UI.Modal
 */
export const Modal = new Modal$Type();
