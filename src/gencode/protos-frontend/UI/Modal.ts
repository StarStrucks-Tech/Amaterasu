// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.27.0
// source: protos-frontend/UI/Modal.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Button } from "./Button";
import { CornerRadius } from "./ServerDrivenMessages";
import { Text } from "./Text";

export const protobufPackage = "UI";

/**
 * Modal message
 * Represents a modal component, which includes visibility, text, button, width, height, and corner radius
 */
export interface Modal {
  /**
   * Visibility of the modal
   * This field indicates whether the modal is visible or not
   */
  visible: boolean;
  /**
   * Text content of the modal
   * This field contains the text to be displayed in the modal
   */
  modalText:
    | Text
    | undefined;
  /**
   * Button associated with the modal
   * This field contains the button to be displayed in the modal
   */
  modalButton:
    | Button
    | undefined;
  /**
   * Width of the modal
   * This field specifies the width of the modal
   */
  width: number;
  /**
   * Height of the modal
   * This field specifies the height of the modal
   */
  height: number;
  /**
   * Corner radius of the modal
   * This field specifies the corner radius of the modal
   */
  modalRadius: CornerRadius | undefined;
}

function createBaseModal(): Modal {
  return { visible: false, modalText: undefined, modalButton: undefined, width: 0, height: 0, modalRadius: undefined };
}

export const Modal = {
  encode(message: Modal, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.visible !== false) {
      writer.uint32(8).bool(message.visible);
    }
    if (message.modalText !== undefined) {
      Text.encode(message.modalText, writer.uint32(18).fork()).ldelim();
    }
    if (message.modalButton !== undefined) {
      Button.encode(message.modalButton, writer.uint32(26).fork()).ldelim();
    }
    if (message.width !== 0) {
      writer.uint32(37).float(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(45).float(message.height);
    }
    if (message.modalRadius !== undefined) {
      CornerRadius.encode(message.modalRadius, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Modal {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.visible = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.modalText = Text.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.modalButton = Button.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.width = reader.float();
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.height = reader.float();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.modalRadius = CornerRadius.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Modal {
    return {
      visible: isSet(object.visible) ? globalThis.Boolean(object.visible) : false,
      modalText: isSet(object.modalText) ? Text.fromJSON(object.modalText) : undefined,
      modalButton: isSet(object.modalButton) ? Button.fromJSON(object.modalButton) : undefined,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      modalRadius: isSet(object.modalRadius) ? CornerRadius.fromJSON(object.modalRadius) : undefined,
    };
  },

  toJSON(message: Modal): unknown {
    const obj: any = {};
    if (message.visible !== false) {
      obj.visible = message.visible;
    }
    if (message.modalText !== undefined) {
      obj.modalText = Text.toJSON(message.modalText);
    }
    if (message.modalButton !== undefined) {
      obj.modalButton = Button.toJSON(message.modalButton);
    }
    if (message.width !== 0) {
      obj.width = message.width;
    }
    if (message.height !== 0) {
      obj.height = message.height;
    }
    if (message.modalRadius !== undefined) {
      obj.modalRadius = CornerRadius.toJSON(message.modalRadius);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Modal>, I>>(base?: I): Modal {
    return Modal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Modal>, I>>(object: I): Modal {
    const message = createBaseModal();
    message.visible = object.visible ?? false;
    message.modalText = (object.modalText !== undefined && object.modalText !== null)
      ? Text.fromPartial(object.modalText)
      : undefined;
    message.modalButton = (object.modalButton !== undefined && object.modalButton !== null)
      ? Button.fromPartial(object.modalButton)
      : undefined;
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    message.modalRadius = (object.modalRadius !== undefined && object.modalRadius !== null)
      ? CornerRadius.fromPartial(object.modalRadius)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
