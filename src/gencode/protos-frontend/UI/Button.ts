// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "protos-frontend/UI/Button.proto" (package "UI", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CornerRadius } from "./ServerDrivenMessages";
import { Text } from "./Text";
/**
 * Define a message structure for a Button.
 *
 * @generated from protobuf message UI.Button
 */
export interface Button {
    /**
     * The text displayed on the button.
     *
     * @generated from protobuf field: UI.Text text = 1;
     */
    text?: Text;
    /**
     * The corner radius of the button.
     *
     * @generated from protobuf field: UI.CornerRadius corner_radius = 2;
     */
    cornerRadius?: CornerRadius;
    /**
     * The background color of the button.
     *
     * @generated from protobuf field: string background_color = 3;
     */
    backgroundColor: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Button$Type extends MessageType<Button> {
    constructor() {
        super("UI.Button", [
            { no: 1, name: "text", kind: "message", T: () => Text },
            { no: 2, name: "corner_radius", kind: "message", T: () => CornerRadius },
            { no: 3, name: "background_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Button>): Button {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.backgroundColor = "";
        if (value !== undefined)
            reflectionMergePartial<Button>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Button): Button {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* UI.Text text */ 1:
                    message.text = Text.internalBinaryRead(reader, reader.uint32(), options, message.text);
                    break;
                case /* UI.CornerRadius corner_radius */ 2:
                    message.cornerRadius = CornerRadius.internalBinaryRead(reader, reader.uint32(), options, message.cornerRadius);
                    break;
                case /* string background_color */ 3:
                    message.backgroundColor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Button, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* UI.Text text = 1; */
        if (message.text)
            Text.internalBinaryWrite(message.text, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* UI.CornerRadius corner_radius = 2; */
        if (message.cornerRadius)
            CornerRadius.internalBinaryWrite(message.cornerRadius, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string background_color = 3; */
        if (message.backgroundColor !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.backgroundColor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UI.Button
 */
export const Button = new Button$Type();
