// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "protos-frontend/UI/ServerDrivenMessages.proto" (package "UI", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Define a message structure for corner radius properties.
 *
 * @generated from protobuf message UI.CornerRadius
 */
export interface CornerRadius {
    /**
     * @generated from protobuf field: int32 top_left = 1;
     */
    topLeft: number;
    /**
     * @generated from protobuf field: int32 top_right = 2;
     */
    topRight: number;
    /**
     * @generated from protobuf field: int32 bottom_left = 3;
     */
    bottomLeft: number;
    /**
     * @generated from protobuf field: int32 bottom_right = 4;
     */
    bottomRight: number;
}
/**
 * Define a message structure for text style properties.
 *
 * @generated from protobuf message UI.TextStyle
 */
export interface TextStyle {
    /**
     * The font size of the text.
     *
     * @generated from protobuf field: float font_size = 1;
     */
    fontSize: number;
    /**
     * The font weight of the text
     *
     * @generated from protobuf field: string font_weight = 2;
     */
    fontWeight: string;
    /**
     * The color of the text.
     *
     * @generated from protobuf field: string color = 3;
     */
    color: string;
    /**
     * Indicates whether the text alignment is centered.
     *
     * @generated from protobuf field: bool text_align_center = 4;
     */
    textAlignCenter: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class CornerRadius$Type extends MessageType<CornerRadius> {
    constructor() {
        super("UI.CornerRadius", [
            { no: 1, name: "top_left", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "top_right", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "bottom_left", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "bottom_right", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CornerRadius>): CornerRadius {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.topLeft = 0;
        message.topRight = 0;
        message.bottomLeft = 0;
        message.bottomRight = 0;
        if (value !== undefined)
            reflectionMergePartial<CornerRadius>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CornerRadius): CornerRadius {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 top_left */ 1:
                    message.topLeft = reader.int32();
                    break;
                case /* int32 top_right */ 2:
                    message.topRight = reader.int32();
                    break;
                case /* int32 bottom_left */ 3:
                    message.bottomLeft = reader.int32();
                    break;
                case /* int32 bottom_right */ 4:
                    message.bottomRight = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CornerRadius, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 top_left = 1; */
        if (message.topLeft !== 0)
            writer.tag(1, WireType.Varint).int32(message.topLeft);
        /* int32 top_right = 2; */
        if (message.topRight !== 0)
            writer.tag(2, WireType.Varint).int32(message.topRight);
        /* int32 bottom_left = 3; */
        if (message.bottomLeft !== 0)
            writer.tag(3, WireType.Varint).int32(message.bottomLeft);
        /* int32 bottom_right = 4; */
        if (message.bottomRight !== 0)
            writer.tag(4, WireType.Varint).int32(message.bottomRight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UI.CornerRadius
 */
export const CornerRadius = new CornerRadius$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TextStyle$Type extends MessageType<TextStyle> {
    constructor() {
        super("UI.TextStyle", [
            { no: 1, name: "font_size", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "font_weight", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "text_align_center", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<TextStyle>): TextStyle {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fontSize = 0;
        message.fontWeight = "";
        message.color = "";
        message.textAlignCenter = false;
        if (value !== undefined)
            reflectionMergePartial<TextStyle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TextStyle): TextStyle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float font_size */ 1:
                    message.fontSize = reader.float();
                    break;
                case /* string font_weight */ 2:
                    message.fontWeight = reader.string();
                    break;
                case /* string color */ 3:
                    message.color = reader.string();
                    break;
                case /* bool text_align_center */ 4:
                    message.textAlignCenter = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TextStyle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float font_size = 1; */
        if (message.fontSize !== 0)
            writer.tag(1, WireType.Bit32).float(message.fontSize);
        /* string font_weight = 2; */
        if (message.fontWeight !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fontWeight);
        /* string color = 3; */
        if (message.color !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.color);
        /* bool text_align_center = 4; */
        if (message.textAlignCenter !== false)
            writer.tag(4, WireType.Varint).bool(message.textAlignCenter);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UI.TextStyle
 */
export const TextStyle = new TextStyle$Type();
