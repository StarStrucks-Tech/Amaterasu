// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "protos-frontend/UI/CheckBox.proto" (package "UI", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Text } from "./Text";
/**
 * *
 * CheckBox message
 * Represents a checkbox component.
 *
 * @generated from protobuf message UI.CheckBox
 */
export interface CheckBox {
    /**
     * *
     * Value of the checkbox (true if checked, false if unchecked)
     *
     * @generated from protobuf field: bool value = 1;
     */
    value: boolean;
    /**
     * *
     * Text associated with the checkbox
     *
     * @generated from protobuf field: UI.Text text = 2;
     */
    text?: Text;
}
// @generated message type with reflection information, may provide speed optimized methods
class CheckBox$Type extends MessageType<CheckBox> {
    constructor() {
        super("UI.CheckBox", [
            { no: 1, name: "value", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "text", kind: "message", T: () => Text }
        ]);
    }
    create(value?: PartialMessage<CheckBox>): CheckBox {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = false;
        if (value !== undefined)
            reflectionMergePartial<CheckBox>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckBox): CheckBox {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool value */ 1:
                    message.value = reader.bool();
                    break;
                case /* UI.Text text */ 2:
                    message.text = Text.internalBinaryRead(reader, reader.uint32(), options, message.text);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckBox, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool value = 1; */
        if (message.value !== false)
            writer.tag(1, WireType.Varint).bool(message.value);
        /* UI.Text text = 2; */
        if (message.text)
            Text.internalBinaryWrite(message.text, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UI.CheckBox
 */
export const CheckBox = new CheckBox$Type();
