// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.27.0
// source: protos-frontend/UI/LocationConsent.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Image } from "./Image";
import { Text } from "./Text";

export const protobufPackage = "UI";

/**
 * LocationConsent message
 *
 * Represents a location consent component.
 */
export interface LocationConsent {
  /** Image associated with the location consent */
  image:
    | Image
    | undefined;
  /** Header text for the location consent */
  header:
    | Text
    | undefined;
  /** Text description for the location consent */
  text: Text | undefined;
}

function createBaseLocationConsent(): LocationConsent {
  return { image: undefined, header: undefined, text: undefined };
}

export const LocationConsent = {
  encode(message: LocationConsent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.image !== undefined) {
      Image.encode(message.image, writer.uint32(10).fork()).ldelim();
    }
    if (message.header !== undefined) {
      Text.encode(message.header, writer.uint32(18).fork()).ldelim();
    }
    if (message.text !== undefined) {
      Text.encode(message.text, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LocationConsent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocationConsent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.image = Image.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.header = Text.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.text = Text.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocationConsent {
    return {
      image: isSet(object.image) ? Image.fromJSON(object.image) : undefined,
      header: isSet(object.header) ? Text.fromJSON(object.header) : undefined,
      text: isSet(object.text) ? Text.fromJSON(object.text) : undefined,
    };
  },

  toJSON(message: LocationConsent): unknown {
    const obj: any = {};
    if (message.image !== undefined) {
      obj.image = Image.toJSON(message.image);
    }
    if (message.header !== undefined) {
      obj.header = Text.toJSON(message.header);
    }
    if (message.text !== undefined) {
      obj.text = Text.toJSON(message.text);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LocationConsent>, I>>(base?: I): LocationConsent {
    return LocationConsent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LocationConsent>, I>>(object: I): LocationConsent {
    const message = createBaseLocationConsent();
    message.image = (object.image !== undefined && object.image !== null) ? Image.fromPartial(object.image) : undefined;
    message.header = (object.header !== undefined && object.header !== null)
      ? Text.fromPartial(object.header)
      : undefined;
    message.text = (object.text !== undefined && object.text !== null) ? Text.fromPartial(object.text) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
