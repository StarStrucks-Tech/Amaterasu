// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "protos-frontend/UI/LocationConsent.proto" (package "UI", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Text } from "./Text";
import { Image } from "./Image";
/**
 * *
 * LocationConsent message
 *
 * Represents a location consent component.
 *
 * @generated from protobuf message UI.LocationConsent
 */
export interface LocationConsent {
    /**
     * *
     * Image associated with the location consent
     *
     * @generated from protobuf field: UI.Image image = 1;
     */
    image?: Image;
    /**
     * *
     * Header text for the location consent
     *
     * @generated from protobuf field: UI.Text header = 2;
     */
    header?: Text;
    /**
     * *
     * Text description for the location consent
     *
     * @generated from protobuf field: UI.Text text = 3;
     */
    text?: Text;
}
// @generated message type with reflection information, may provide speed optimized methods
class LocationConsent$Type extends MessageType<LocationConsent> {
    constructor() {
        super("UI.LocationConsent", [
            { no: 1, name: "image", kind: "message", T: () => Image },
            { no: 2, name: "header", kind: "message", T: () => Text },
            { no: 3, name: "text", kind: "message", T: () => Text }
        ]);
    }
    create(value?: PartialMessage<LocationConsent>): LocationConsent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LocationConsent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LocationConsent): LocationConsent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* UI.Image image */ 1:
                    message.image = Image.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                case /* UI.Text header */ 2:
                    message.header = Text.internalBinaryRead(reader, reader.uint32(), options, message.header);
                    break;
                case /* UI.Text text */ 3:
                    message.text = Text.internalBinaryRead(reader, reader.uint32(), options, message.text);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LocationConsent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* UI.Image image = 1; */
        if (message.image)
            Image.internalBinaryWrite(message.image, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* UI.Text header = 2; */
        if (message.header)
            Text.internalBinaryWrite(message.header, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* UI.Text text = 3; */
        if (message.text)
            Text.internalBinaryWrite(message.text, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UI.LocationConsent
 */
export const LocationConsent = new LocationConsent$Type();
